# =================================================================================
#    –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–û–¢–ê (V20+, RENDER WEBSERVICE, –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö)
# =================================================================================

# --- 1. –ò–ú–ü–û–†–¢–´ ---
import os
import logging
from datetime import datetime
import zipfile
import io
from typing import List, Dict, Any, Optional, Tuple, Set
import asyncio

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
import uvicorn
from fastapi import FastAPI

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –±–æ—Ç–∞ –∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
from telegram import Update, ReplyKeyboardMarkup, Message
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from openpyxl import Workbook
from openpyxl.styles import PatternFill
from openpyxl.utils import get_column_letter

# –î–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ Render)
from dotenv import load_dotenv
load_dotenv()


# --- 2. –ù–ê–°–¢–†–û–ô–ö–ê –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞ (–ª–æ–∫–∞–ª—å–Ω–æ) –∏–ª–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render (–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞
ALLOWED_USER_IDS: Set[int] = {123456789} 

# –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è v20+
user_filter = filters.User(user_id=ALLOWED_USER_IDS)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_FILE_SIZE = 20 * 1024 * 1024
EXPIRATION_THRESHOLD_DAYS = 30
RED_FILL = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
ORANGE_FILL = PatternFill(start_color="FFDDAA", end_color="FFDDAA", fill_type="solid")
GREEN_FILL = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")
EXCEL_HEADERS: Tuple[str, ...] = ("–§–ò–û", "–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ", "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π")
ALLOWED_EXTENSIONS: Tuple[str, ...] = ('.cer', '.crt', '.pem', '.der')

# --- 3. –í–ï–ë-–°–ï–†–í–ï–† FASTAPI ---
# –≠—Ç–æ—Ç –º–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å Render, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤
app = FastAPI()

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ Render."""
    return {"status": "bot is running"}


# --- 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

def get_certificate_info(cert_bytes: bytes) -> Optional[Dict[str, Any]]:
    try:
        try: cert = x509.load_pem_x509_certificate(cert_bytes, default_backend())
        except ValueError: cert = x509.load_der_x509_certificate(cert_bytes, default_backend())
        try: subject_common_name = cert.subject.get_attributes_for_oid(x509.OID_COMMON_NAME)[0].value
        except IndexError: subject_common_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        try: organization_name = cert.subject.get_attributes_for_oid(x509.OID_ORGANIZATION_NAME)[0].value
        except IndexError: organization_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        serial_number = f"{cert.serial_number:X}"
        valid_from = cert.not_valid_before.date()
        valid_until = cert.not_valid_after.date()
        days_left = (valid_until - datetime.now().date()).days
        return {"–§–ò–û": subject_common_name, "–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ": organization_name, "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä": serial_number, "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å": valid_from, "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ": valid_until, "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π": days_left}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return None

def create_excel_report(cert_data_list: List[Dict[str, Any]]) -> io.BytesIO:
    wb = Workbook()
    ws = wb.active
    ws.title = "–û—Ç—á–µ—Ç –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º"
    ws.append(list(EXCEL_HEADERS))
    sorted_cert_data = sorted(cert_data_list, key=lambda x: x["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ"])
    for cert_data in sorted_cert_data:
        row = [cert_data["–§–ò–û"], cert_data["–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ"], cert_data["–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"], cert_data["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å"].strftime("%d.%m.%Y"), cert_data["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ"].strftime("%d.%m.%Y"), cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]]
        ws.append(row)
        last_row = ws.max_row
        days_left = cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]
        fill_color = None
        if days_left < 0: fill_color = RED_FILL
        elif 0 <= days_left <= EXPIRATION_THRESHOLD_DAYS: fill_color = ORANGE_FILL
        else: fill_color = GREEN_FILL
        if fill_color:
            for cell in ws[last_row]: cell.fill = fill_color
    for column in ws.columns:
        max_length = 0
        column_letter = get_column_letter(column[0].column)
        for cell in column:
            try:
                if len(str(cell.value)) > max_length: max_length = len(str(cell.value))
            except: pass
        adjusted_width = (max_length + 2)
        ws.column_dimensions[column_letter].width = adjusted_width
    excel_buffer = io.BytesIO()
    wb.save(excel_buffer)
    excel_buffer.seek(0)
    return excel_buffer

def generate_summary_message(cert_data_list: List[Dict[str, Any]]) -> str:
    expired_certs, expiring_soon_certs = [], []
    for cert_data in cert_data_list:
        days_left = cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]
        if days_left < 0: expired_certs.append(f"üë§ {cert_data['–§–ò–û']} ‚Äî {cert_data['–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ'].strftime('%d.%m.%Y')} (–∏—Å—Ç—ë–∫ {abs(days_left)} –¥–Ω.)")
        elif 0 <= days_left <= EXPIRATION_THRESHOLD_DAYS: expiring_soon_certs.append(f"üë§ {cert_data['–§–ò–û']} ‚Äî {cert_data['–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ'].strftime('%d.%m.%Y')} - –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π ‚Äì {days_left}.")
    message_parts = []
    if expired_certs: message_parts.extend(["‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:", *expired_certs, "\n"])
    if expiring_soon_certs: message_parts.extend([f"‚ö†Ô∏è –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç ({EXPIRATION_THRESHOLD_DAYS} –¥–Ω–µ–π):", *expiring_soon_certs])
    return "\n".join(message_parts) if message_parts else "‚úÖ –í—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ –∏–º–µ—é—Ç –±–æ–ª—å—à–æ–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è."

def _process_file_content(file_bytes: bytes, file_name: str) -> List[Dict[str, Any]]:
    all_certs_data = []
    if file_name.lower().endswith(".zip"):
        try:
            with zipfile.ZipFile(io.BytesIO(file_bytes), 'r') as z:
                for member in z.namelist():
                    if member.lower().endswith(ALLOWED_EXTENSIONS):
                        with z.open(member) as cert_file:
                            cert_info = get_certificate_info(cert_file.read())
                            if cert_info: all_certs_data.append(cert_info)
        except zipfile.BadZipFile:
            logger.error(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π ZIP-—Ñ–∞–π–ª: {file_name}", exc_info=True)
            return []
    elif file_name.lower().endswith(ALLOWED_EXTENSIONS):
        cert_info = get_certificate_info(file_bytes)
        if cert_info: all_certs_data.append(cert_info)
    return all_certs_data

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    await update.message.reply_text(f"–í–∞—à User ID: `{user_id}`\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `ALLOWED_USER_IDS` –≤ –∫–æ–¥–µ –±–æ—Ç–∞.", parse_mode='MarkdownV2')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    keyboard = [["üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "üìÑ –ó–∞—è–≤–∫–∞ –ê–ö–¶"], ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    start_message = (f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
                     "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤. –ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                     "‚Äì –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ .cer, .crt, .pem, .der\n"
                     "‚Äì –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–æ–≤ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏\n"
                     "‚Äì –°–æ–∑–¥–∞–Ω–∏–µ Excel-–æ—Ç—á–µ—Ç–∞ —Å–æ —Å—Ä–æ–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:")
    await update.message.reply_html(start_message, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª(—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ ({', '.join(ALLOWED_EXTENSIONS)}) –∏–ª–∏ ZIP-–∞—Ä—Ö–∏–≤.")

async def request_certificate_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª(—ã) —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ "
                                    f"({', '.join(ALLOWED_EXTENSIONS)}) –∏–ª–∏ ZIP-–∞—Ä—Ö–∏–≤ —Å –Ω–∏–º–∏.\n"
                                    "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö –∏ –ø—Ä–∏—à–ª—é –≤–∞–º –æ—Ç—á–µ—Ç.")

async def settings_placeholder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!")

async def acc_finance_placeholder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É-–∑–∞–≥–ª—É—à–∫—É '–ó–∞—è–≤–∫–∞ –ê–ö–¶'.")
    message_text = ("üìà **–§—É–Ω–∫—Ü–∏—è '–ó–∞—è–≤–∫–∞ –ê–ö–¶-–§–∏–Ω–∞–Ω—Å—ã' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.**\n\n"
                    "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É "
                    "–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¶–ò–¢–ü –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.\n\n"
                    "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
    await update.message.reply_html(message_text)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    document = update.message.document
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤–Ω—É—Ç—Ä—å —Ñ—É–Ω–∫—Ü–∏–∏
    if document.file_size > MAX_FILE_SIZE:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {document.file_name} ({document.file_size / 1024 / 1024:.2f} –ú–ë)")
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë."
        )
        return

    file_name = document.file_name
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç(—ã), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    try:
        file_object = await context.bot.get_file(document.file_id)
        file_buffer = io.BytesIO()
        await file_object.download_to_memory(file_buffer)
        file_buffer.seek(0)
        all_certs_data = _process_file_content(file_buffer.read(), file_name)
        if not all_certs_data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ/–∞—Ä—Ö–∏–≤–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            return
        excel_buffer = create_excel_report(all_certs_data)
        summary_message = generate_summary_message(all_certs_data)
        await update.message.reply_text(summary_message)
        await update.message.reply_document(document=excel_buffer, filename="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã_–æ—Ç—á–µ—Ç.xlsx")
        logger.info(f"–û—Ç—á–µ—Ç –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_wrong_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ —Å—é–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
    if update.message.document and update.message.document.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë."
        )
        return

    user_id = update.effective_user.id
    file_name = update.message.document.file_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {file_name}")
    allowed_ext_str = ", ".join(ALLOWED_EXTENSIONS)
    await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n\n"
                                    f"–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏: {allowed_ext_str}, –∞ —Ç–∞–∫–∂–µ .zip –∞—Ä—Ö–∏–≤—ã.")


# --- 5. –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---
async def main() -> None:
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ .env –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º –∏ –±–µ–∑ MAX_SIZE
    application.add_handler(CommandHandler("my_id", get_my_id))
    application.add_handler(CommandHandler("start", start, filters=user_filter))
    application.add_handler(CommandHandler("help", help_command, filters=user_filter))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex("‚ùì –ü–æ–º–æ—â—å") & user_filter, help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex("üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç") & user_filter, request_certificate_files))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏") & user_filter, settings_placeholder))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex("üìÑ –ó–∞—è–≤–∫–∞ –ê–ö–¶") & user_filter, acc_finance_placeholder))
    
    allowed_extensions_filter = (filters.Document.FileExtension("zip") | filters.Document.FileExtension("cer") |
                                 filters.Document.FileExtension("crt") | filters.Document.FileExtension("pem") |
                                 filters.Document.FileExtension("der"))
    
    application.add_handler(MessageHandler(allowed_extensions_filter & ~filters.COMMAND & user_filter, handle_document))
    application.add_handler(MessageHandler(filters.Document.ALL & ~filters.COMMAND & user_filter, handle_wrong_document))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Uvicorn –∏ –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 8000))
    config = uvicorn.Config(app, host="0.0.0.0", port=port, log_level="info")
    server = uvicorn.Server(config)

    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ (polling) –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (uvicorn)...")
        await asyncio.gather(
            application.run_polling(allowed_updates=Update.ALL_TYPES),
            server.serve()
        )
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)


# --- 6. –¢–û–ß–ö–ê –í–•–û–î–ê –î–õ–Ø –ó–ê–ü–£–°–ö–ê –°–ö–†–ò–ü–¢–ê ---
if __name__ == "__main__":
    asyncio.run(main())
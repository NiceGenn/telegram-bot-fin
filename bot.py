# =================================================================================
#  –§–ê–ô–õ: bot.py (V5.9 - –° –ì–ò–ë–ö–ò–ú –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –î–û–°–¢–£–ü–û–ú)
# =================================================================================

# --- 1. –ò–ú–ü–û–†–¢–´ ---
import os
import logging
import asyncio
from datetime import datetime
import zipfile
import io
from typing import List, Dict, Any, Optional, Tuple, Set
import psycopg2
import yt_dlp
import telegram
import uuid
import time
import docx
from docx.enum.section import WD_ORIENT
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.shared import Cm, Pt

from telegram import Update, ReplyKeyboardMarkup, Message, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, MessageOriginUser
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from openpyxl import Workbook
from openpyxl.styles import PatternFill
from openpyxl.utils import get_column_letter
from dotenv import load_dotenv

load_dotenv()


# --- 2. –ù–ê–°–¢–†–û–ô–ö–ê –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.environ.get("DATABASE_URL")
ADMIN_USER_ID = 96238783  # ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –°–ò–°–¢–ï–ú–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô (ROLES/PERMISSIONS) ---
AVAILABLE_PERMISSIONS = {
    "cert_analysis": "üìú –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤",
    "akc_form": "üìÑ –ó–∞—è–≤–∫–∞ –ê–¶–ö",
    "youtube": "üé¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å YouTube",
    "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
}

def has_permission(user_id: int, feature: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ context."""
    permissions_dict = context.bot_data.get('permissions', {})
    user_permissions = permissions_dict.get(user_id, {}).get('perms', set())
    if "admin" in user_permissions:
        return True
    return feature in user_permissions

# -------------------------------------------------

MAX_FILE_SIZE = 20 * 1024 * 1024
MAX_VIDEO_SIZE_BYTES = 49 * 1024 * 1024
EXPIRATION_THRESHOLD_DAYS = 30
RED_FILL = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
ORANGE_FILL = PatternFill(start_color="FFDDAA", end_color="FFDDAA", fill_type="solid")
GREEN_FILL = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")
EXCEL_HEADERS: Tuple[str, ...] = ("–§–ò–û", "–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ", "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π")
ALLOWED_EXTENSIONS: Tuple[str, ...] = ('.cer', '.crt', '.pem', '.der')
YOUTUBE_URL_PATTERN = r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
(
    AWAITING_YOUTUBE_LINK, CONFIRMING_DOWNLOAD,
    AKC_CONFIRM_DEFAULTS, AKC_SENDER_FIO, AKC_ORG_NAME, AKC_INN_KPP, AKC_MUNICIPALITY,
    AKC_AWAIT_CERTIFICATES, AKC_ROLE, AKC_CITP_NAME, AKC_CONFIRM_LOGINS, AKC_LOGINS, AKC_ACTION,
    CERT_AWAIT_FILES, CERT_AWAIT_THRESHOLD, CERT_TYPING_THRESHOLD,
    ACCESS_MENU, AWAITING_USER_INFO, AWAITING_PERMISSIONS, AWAITING_USER_TO_DELETE
) = range(20)


# --- 3. –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• POSTGRESQL ---
def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL."""
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cursor:
            cursor.execute('CREATE TABLE IF NOT EXISTS user_settings (user_id BIGINT PRIMARY KEY, threshold INTEGER NOT NULL)')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS akc_sender_defaults (
                    user_id BIGINT PRIMARY KEY,
                    sender_fio TEXT NOT NULL,
                    org_name TEXT NOT NULL,
                    inn_kpp TEXT NOT NULL,
                    municipality TEXT NOT NULL
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS akc_login_defaults (
                    user_id BIGINT PRIMARY KEY,
                    logins TEXT NOT NULL
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_permissions (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    permissions TEXT NOT NULL
                )
            ''')
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞
            cursor.execute(
                """
                INSERT INTO user_permissions (user_id, username, permissions) VALUES (%s, %s, %s) 
                ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, permissions = EXCLUDED.permissions;
                """,
                (ADMIN_USER_ID, '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'admin')
            )
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
    finally:
        if conn: conn.close()

def db_load_all_permissions() -> Dict[int, Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    if not conn: return {}
    permissions = {}
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT user_id, username, permissions FROM user_permissions")
            records = cursor.fetchall()
            for record in records:
                user_id, username, perms_str = record
                permissions[user_id] = {'name': username, 'perms': set(perms_str.split(','))}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
    finally:
        if conn: conn.close()
    return permissions

def db_save_user_permissions(user_id: int, username: str, permissions: Set[str]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    if not conn: return
    perms_str = ",".join(sorted(list(permissions)))
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO user_permissions (user_id, username, permissions) VALUES (%s, %s, %s) "
                "ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, permissions = EXCLUDED.permissions;",
                (user_id, username, perms_str)
            )
        conn.commit()
        logger.info(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è {user_id}: {e}")
    finally:
        if conn: conn.close()

def db_delete_user(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π."""
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM user_permissions WHERE user_id = %s", (user_id,))
        conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        if conn: conn.close()

def save_user_threshold(user_id: int, threshold: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä–æ–≥ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cursor:
            cursor.execute("INSERT INTO user_settings (user_id, threshold) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET threshold = EXCLUDED.threshold;",(user_id, threshold))
        conn.commit()
    finally:
        if conn: conn.close()

def load_user_threshold(user_id: int) -> Optional[int]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Ä–æ–≥ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    if not conn: return None
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT threshold FROM user_settings WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
        return result[0] if result else None
    finally:
        if conn: conn.close()

async def get_user_threshold(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä–æ–≥ –¥–Ω–µ–π –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    if 'threshold' in context.user_data:
        return context.user_data['threshold']
    
    threshold_from_db = load_user_threshold(user_id)
    if threshold_from_db is not None:
        context.user_data['threshold'] = threshold_from_db
        return threshold_from_db
    
    return EXPIRATION_THRESHOLD_DAYS

def save_akc_defaults(user_id: int, form_data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —à–∞–ø–∫–∏ –∑–∞—è–≤–∫–∏ –ê–¶–ö –∫–∞–∫ —à–∞–±–ª–æ–Ω."""
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO akc_sender_defaults (user_id, sender_fio, org_name, inn_kpp, municipality) "
                "VALUES (%s, %s, %s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET "
                "sender_fio = EXCLUDED.sender_fio, org_name = EXCLUDED.org_name, "
                "inn_kpp = EXCLUDED.inn_kpp, municipality = EXCLUDED.municipality;",
                (user_id, form_data['sender_fio'], form_data['org_name'], form_data['inn_kpp'], form_data['municipality'])
            )
        conn.commit()
        logger.info(f"–®–∞–±–ª–æ–Ω –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è {user_id}: {e}")
    finally:
        if conn: conn.close()

def load_akc_defaults(user_id: int) -> Optional[Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏ –ê–¶–ö."""
    conn = get_db_connection()
    if not conn: return None
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT sender_fio, org_name, inn_kpp, municipality FROM akc_sender_defaults WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
        if result:
            return {
                'sender_fio': result[0],
                'org_name': result[1],
                'inn_kpp': result[2],
                'municipality': result[3]
            }
        return None
    finally:
        if conn: conn.close()

def save_akc_logins(user_id: int, logins: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ –ê–¶–ö."""
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO akc_login_defaults (user_id, logins) VALUES (%s, %s) "
                "ON CONFLICT (user_id) DO UPDATE SET logins = EXCLUDED.logins;",
                (user_id, logins)
            )
        conn.commit()
        logger.info(f"–õ–æ–≥–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω–æ–≤ –¥–ª—è {user_id}: {e}")
    finally:
        if conn: conn.close()

def load_akc_logins(user_id: int) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    if not conn: return None
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT logins FROM akc_login_defaults WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
        return result[0] if result else None
    finally:
        if conn: conn.close()


# --- 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def create_excel_report(cert_data_list: List[Dict[str, Any]], user_threshold: int) -> io.BytesIO:
    """–°–æ–∑–¥–∞–µ—Ç Excel-–æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤."""
    wb = Workbook()
    ws = wb.active
    ws.title = "–û—Ç—á–µ—Ç –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º"
    ws.append(list(EXCEL_HEADERS))
    
    sorted_cert_data = sorted(cert_data_list, key=lambda x: x["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ"])
    
    for cert_data in sorted_cert_data:
        row = [
            cert_data["–§–ò–û"], 
            cert_data["–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ"], 
            cert_data["–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"], 
            cert_data["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å"].strftime("%d.%m.%Y"), 
            cert_data["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ"].strftime("%d.%m.%Y"), 
            cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]
        ]
        ws.append(row)
        
        last_row = ws.max_row
        days_left = cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]
        fill_color = None
        
        if days_left < 0:
            fill_color = RED_FILL
        elif 0 <= days_left <= user_threshold:
            fill_color = ORANGE_FILL
        else:
            fill_color = GREEN_FILL
            
        if fill_color:
            for cell in ws[last_row]:
                cell.fill = fill_color
                
    for column in ws.columns:
        max_length = 0
        column_letter = get_column_letter(column[0].column)
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = (max_length + 2)
        ws.column_dimensions[column_letter].width = adjusted_width
        
    excel_buffer = io.BytesIO()
    wb.save(excel_buffer)
    excel_buffer.seek(0)
    return excel_buffer

def generate_summary_message(cert_data_list: List[Dict[str, Any]], user_threshold: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö."""
    expiring_soon_certs = []
    for cert_data in cert_data_list:
        days_left = cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]
        if 0 <= days_left <= user_threshold:
            expiring_soon_certs.append(f"üë§ {cert_data['–§–ò–û']} ‚Äî {cert_data['–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ'].strftime('%d.%m.%Y')} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)")
            
    if expiring_soon_certs:
        message_parts = [f"‚ö†Ô∏è –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç ({user_threshold} –¥–Ω–µ–π):", *expiring_soon_certs]
        return "\n".join(message_parts)
    else:
        return "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

def get_certificate_info(cert_bytes: bytes) -> Optional[Dict[str, Any]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    try:
        try:
            cert = x509.load_pem_x509_certificate(cert_bytes, default_backend())
        except ValueError:
            cert = x509.load_der_x509_certificate(cert_bytes, default_backend())
            
        try:
            subject_common_name = cert.subject.get_attributes_for_oid(x509.OID_COMMON_NAME)[0].value
        except IndexError:
            subject_common_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        try:
            organization_name = cert.subject.get_attributes_for_oid(x509.OID_ORGANIZATION_NAME)[0].value
        except IndexError:
            organization_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        serial_number = f"{cert.serial_number:X}"
        valid_from = cert.not_valid_before.date()
        valid_until = cert.not_valid_after.date()
        days_left = (valid_until - datetime.now().date()).days
        
        return {
            "–§–ò–û": subject_common_name,
            "–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ": organization_name,
            "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä": serial_number,
            "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å": valid_from,
            "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ": valid_until,
            "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π": days_left
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return None

def _process_file_content(file_bytes: bytes, file_name: str) -> List[Dict[str, Any]]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏–ª–∏ ZIP-–∞—Ä—Ö–∏–≤)."""
    all_certs_data = []
    if file_name.lower().endswith(".zip"):
        try:
            with zipfile.ZipFile(io.BytesIO(file_bytes), 'r') as z:
                for member in z.namelist():
                    if member.lower().endswith(ALLOWED_EXTENSIONS):
                        with z.open(member) as cert_file:
                            cert_info = get_certificate_info(cert_file.read())
                            if cert_info:
                                all_certs_data.append(cert_info)
        except zipfile.BadZipFile:
            logger.error(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π ZIP-—Ñ–∞–π–ª: {file_name}", exc_info=True)
            return []
    elif file_name.lower().endswith(ALLOWED_EXTENSIONS):
        cert_info = get_certificate_info(file_bytes)
        if cert_info:
            all_certs_data.append(cert_info)
    return all_certs_data

def create_akc_docx(form_data: dict) -> io.BytesIO:
    """–°–æ–∑–¥–∞–µ—Ç DOCX-—Ñ–∞–π–ª –∑–∞—è–≤–∫–∏ –ê–¶–ö —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏."""
    doc = docx.Document()
    section = doc.sections[0]
    section.orientation = WD_ORIENT.LANDSCAPE
    new_width, new_height = section.page_height, section.page_width
    section.page_width = new_width
    section.page_height = new_height
    
    section.top_margin = Cm(2)
    section.bottom_margin = Cm(2)
    section.left_margin = Cm(3)
    section.right_margin = Cm(1.5)

    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.RIGHT
    run = p.add_run("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 5 –∫ –†–µ–≥–ª–∞–º–µ–Ω—Ç—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è\n–º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ê–º—É—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–≥–æ\n—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞")
    font = run.font
    font.name = 'Times New Roman'
    font.size = Pt(12)

    doc.add_paragraph() 

    p = doc.add_paragraph()
    run = p.add_run("–û—Ç –∫–æ–≥–æ: ")
    run.bold = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)
    run = p.add_run(f"{form_data.get('sender_fio', '')}\n")
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)
    
    run = p.add_run("(–§.–ò.–û. –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è)\n")
    run.italic = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(10)
    
    run = p.add_run(f"{form_data.get('org_name', '')}\n")
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)

    run = p.add_run("(–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è)\n")
    run.italic = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(10)

    run = p.add_run(f"{form_data.get('inn_kpp', '')}\n")
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)

    run = p.add_run("(–ò–ù–ù/–ö–ü–ü)\n")
    run.italic = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(10)

    run = p.add_run(f"{form_data.get('municipality', '')}\n")
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)

    run = p.add_run("(–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è)\n")
    run.italic = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(10)

    run = p.add_run(f"{datetime.now().strftime('%d.%m.%Y')}\n")
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)

    run = p.add_run("(–¥–∞—Ç–∞)")
    run.italic = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(10)

    doc.add_paragraph()

    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = p.add_run("–ó–ê–Ø–í–ö–ê\n–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¶–ò–¢–ü")
    run.bold = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)
    
    doc.add_paragraph()

    table = doc.add_table(rows=1, cols=7)
    table.style = 'Table Grid'
    
    headers = [
        "–°—É–±—ä–µ–∫—Ç –≠–ü", "–†–æ–ª—å —Å—É–±—ä–µ–∫—Ç–∞ –≤ –¶–ò–¢–ü (–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –ë—É—Ö–≥–∞–ª—Ç–µ—Ä, –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ì–ò–° –ì–ú–ü)", 
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¶–ò–¢–ü (–ê–¶–ö-–§–∏–Ω–∞–Ω—Å—ã, –ê–¶–ö-–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)", 
        "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞", "–ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞", 
        "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –¶–ò–¢–ü, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ", 
        "–î–µ–π—Å—Ç–≤–∏–µ(–¥–æ–±–∞–≤–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å, –∑–∞–º–µ–Ω–∏—Ç—å, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)"
    ]
    
    for i, cell in enumerate(table.rows[0].cells):
        cell.text = headers[i]
        cell.paragraphs[0].runs[0].font.bold = True
        cell.paragraphs[0].runs[0].font.size = Pt(10)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    for cert_data in form_data.get('certificates', []):
        row_cells = table.add_row().cells
        row_cells[0].text = cert_data.get('cert_owner', '')
        row_cells[1].text = cert_data.get('role', '')
        row_cells[2].text = cert_data.get('citp_name', '')
        row_cells[3].text = cert_data.get('cert_serial', '')
        row_cells[4].text = cert_data.get('cert_filename', '')
        row_cells[5].text = cert_data.get('logins', '')
        row_cells[6].text = cert_data.get('action', '')
        for cell in row_cells:
            cell.paragraphs[0].runs[0].font.size = Pt(10)

    doc.add_paragraph()

    footer_table = doc.add_table(rows=4, cols=3)
    
    footer_table.cell(0, 0).text = "‚Ññ –ó–∞–ø–∏—Å–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –∂—É—Ä–Ω–∞–ª–µ:"
    footer_table.cell(0, 1).text = "–°—Ç–∞—Ç—É—Å:  –≤—ã–ø–æ–ª–Ω–µ–Ω–æ/–æ—Ç–∫–∞–∑–∞–Ω–æ"
    
    footer_table.cell(1, 0).text = "–ó–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    footer_table.cell(1, 1).text = "–ü–æ–¥–ø–∏—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è"
    footer_table.cell(1, 2).text = "–î–∞—Ç–∞"
    
    footer_table.cell(2, 0).text = "–î–∞—Ç–∞:"
    footer_table.cell(2, 1).text = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:"
    
    footer_table.cell(3, 0).text = "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –°–ö–ü –≠–ü"
    footer_table.cell(3, 1).text = "–ú.–ü."
    footer_table.cell(3, 2).text = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ e-mail"

    for row in footer_table.rows:
        for cell in row.cells:
            if cell.text:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = 'Times New Roman'
                        run.font.size = Pt(12)

    doc_buffer = io.BytesIO()
    doc.save(doc_buffer)
    doc_buffer.seek(0)
    return doc_buffer


# --- 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î, –ö–ù–û–ü–û–ö –ò –î–ò–ê–õ–û–ì–û–í ---
async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ Telegram ID."""
    user_id = update.effective_user.id
    await update.message.reply_text(f"–í–∞—à User ID: `{user_id}`", parse_mode='Markdown')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤."""
    user = update.effective_user
    user_id = user.id
    
    keyboard = []
    row1, row2, row3 = [], [], []
    
    if has_permission(user_id, "cert_analysis", context):
        row1.append("üìú –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    if has_permission(user_id, "akc_form", context):
        row1.append("üìÑ –ó–∞—è–≤–∫–∞ –ê–¶–ö")
    if row1:
        keyboard.append(row1)

    if has_permission(user_id, "youtube", context):
        row2.append("üé¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å YouTube")
    if row2:
        keyboard.append(row2)
        
    if has_permission(user_id, "admin", context):
        row3.append("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º")
    row3.append("‚ùì –ü–æ–º–æ—â—å")
    keyboard.append(row3)

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    start_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "–Ø ‚Äî –≤–∞—à –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."
    )
    await update.message.reply_html(start_message, reply_markup=reply_markup)
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    help_text = (
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏:\n\n"
        "üìú **–ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤**\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã `.cer`, `.crt` –∏–ª–∏ `.zip`-–∞—Ä—Ö–∏–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-–æ—Ç—á–µ—Ç–∞.\n\n"
        "üìÑ **–ó–∞—è–≤–∫–∞ –ê–¶–ö**\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX.\n\n"
        "üé¨ **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å YouTube**\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.\n\n"
        "üîë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º** (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n"
        "–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏—Ö –ø—Ä–∞–≤–∞."
    )
    await update.message.reply_text(help_text)

def download_video_sync(url: str, ydl_opts: dict) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é yt-dlp."""
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        return ydl.prepare_filename(info)

async def handle_youtube_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ."""
    url = update.message.text
    msg = await update.message.reply_text("–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
    
    try:
        ydl_opts_info = {'quiet': True, 'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'}
        with yt_dlp.YoutubeDL(ydl_opts_info) as ydl:
            info_dict = ydl.extract_info(url, download=False)
        
        filesize = info_dict.get('filesize') or info_dict.get('filesize_approx')
        title = info_dict.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        if not filesize:
            await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ."); return ConversationHandler.END

        if filesize > MAX_VIDEO_SIZE_BYTES:
            size_in_mb = filesize / 1024 / 1024
            await msg.edit_text(f"‚ùå –í–∏–¥–µ–æ '{title}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({size_in_mb:.1f} –ú–ë)."); return ConversationHandler.END

        context.user_data['youtube_url'] = url
        context.user_data['youtube_title'] = title
        
        size_in_mb = filesize / 1024 / 1024
        keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, —Å–∫–∞—á–∞—Ç—å", callback_data='yt_confirm'), InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='yt_cancel')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await msg.edit_text(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n**–†–∞–∑–º–µ—Ä:** {size_in_mb:.1f} –ú–ë\n\n–ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ?", reply_markup=reply_markup, parse_mode='Markdown')
        return CONFIRMING_DOWNLOAD

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ YouTube –≤–∏–¥–µ–æ: {e}", exc_info=True)
        await msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ: {url}"); return ConversationHandler.END

async def start_download_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    url = context.user_data.get('youtube_url')
    title = context.user_data.get('youtube_title', '–≤–∏–¥–µ–æ')
    user_id = update.effective_user.id

    if not url:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."); return ConversationHandler.END

    await query.edit_message_text(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É '{title}'...")
    
    ydl_opts = {'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best', 'outtmpl': f'{uuid.uuid4()}.%(ext)s', 'quiet': True}
    
    try:
        video_filename = await asyncio.to_thread(download_video_sync, url, ydl_opts)
        await query.edit_message_text("–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        with open(video_filename, 'rb') as video_file:
            await context.bot.send_video(chat_id=user_id, video=video_file, supports_streaming=True, read_timeout=120, write_timeout=120)
        os.remove(video_filename)
        await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ: {url}")
    
    return ConversationHandler.END

async def cancel_download(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def youtube_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å YouTube."""
    if not has_permission(update.effective_user.id, "youtube", context): return ConversationHandler.END
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.")
    return AWAITING_YOUTUBE_LINK

async def invalid_youtube_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube."""
    await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    return AWAITING_YOUTUBE_LINK

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardRemove())
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
    context.user_data.clear()
    return ConversationHandler.END

# --- –õ–û–ì–ò–ö–ê –î–ò–ê–õ–û–ì–ê –ê–ù–ê–õ–ò–ó–ê –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í ---
async def cert_analysis_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤."""
    if not has_permission(update.effective_user.id, "cert_analysis", context): return ConversationHandler.END
    context.user_data['cert_analysis_data'] = {'files': []}
    keyboard = ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "**–ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤** üìä\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (.cer, .crt, .zip).\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–ì–æ—Ç–æ–≤–æ'**.",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    return CERT_AWAIT_FILES

async def handle_cert_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    document = update.message.document
    file_name = document.file_name
    file_id = document.file_id

    file_object = await context.bot.get_file(file_id)
    file_buffer = io.BytesIO()
    await file_object.download_to_memory(file_buffer)
    
    context.user_data['cert_analysis_data']['files'].append({
        'name': file_name,
        'bytes': file_buffer.getvalue()
    })
    
    await update.message.reply_text(f"‚úÖ –§–∞–π–ª `{file_name}` –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", parse_mode='Markdown')
    return CERT_AWAIT_FILES

async def ask_for_threshold_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –¥–Ω–µ–π."""
    if not context.user_data['cert_analysis_data'].get('files'):
        await update.message.reply_text("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        context.user_data.pop('cert_analysis_data', None)
        return ConversationHandler.END

    user_id = update.effective_user.id
    current_threshold = await get_user_threshold(user_id, context)
    
    keyboard = [
        [InlineKeyboardButton(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π ({current_threshold} –¥–Ω.)", callback_data='cert_use_current')],
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π", callback_data='cert_enter_new')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–§–∞–π–ª—ã –ø—Ä–∏–Ω—è—Ç—ã. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥ –¥–Ω–µ–π –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö:",
        reply_markup=reply_markup
    )
    return CERT_AWAIT_THRESHOLD

async def prompt_for_new_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–Ω–µ–π."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60).")
    return CERT_TYPING_THRESHOLD

async def process_with_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE, threshold: int) -> int:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞."""
    message = update.message or update.callback_query.message
    await message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...", reply_markup=ReplyKeyboardRemove())
    
    all_certs_data = []
    for file_info in context.user_data['cert_analysis_data']['files']:
        processed_data = _process_file_content(file_info['bytes'], file_info['name'])
        all_certs_data.extend(processed_data)
        
    if not all_certs_data:
        await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö.")
    else:
        excel_buffer = create_excel_report(all_certs_data, threshold)
        summary_message = generate_summary_message(all_certs_data, threshold)
        await message.reply_text(summary_message)
        await message.reply_document(document=excel_buffer, filename="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã_–æ—Ç—á–µ—Ç.xlsx")
        
    context.user_data.pop('cert_analysis_data', None)
    return ConversationHandler.END

async def process_with_current_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –ø–æ—Ä–æ–≥–æ–º."""
    query = update.callback_query
    await query.answer()
    await query.delete_message()
    user_id = update.effective_user.id
    current_threshold = await get_user_threshold(user_id, context)
    return await process_with_threshold(update, context, current_threshold)

async def set_new_threshold_and_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç."""
    user_id = update.effective_user.id
    try:
        new_threshold = int(update.message.text)
        if new_threshold <= 0:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return CERT_TYPING_THRESHOLD
        
        save_user_threshold(user_id, new_threshold)
        context.user_data['threshold'] = new_threshold # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        await update.message.reply_html(f"‚úÖ –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{new_threshold}</b> –¥–Ω–µ–π.")
        return await process_with_threshold(update, context, new_threshold)

    except (ValueError):
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 60")
        return CERT_TYPING_THRESHOLD

# --- –õ–û–ì–ò–ö–ê –î–ò–ê–õ–û–ì–ê –ó–ê–Ø–í–ö–ò –ê–¶–ö ---
async def akc_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ê–¶–ö –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ."""
    if not has_permission(update.effective_user.id, "akc_form", context): return ConversationHandler.END
    user_id = update.effective_user.id
    context.user_data['akc_form'] = {
        'certificates': [] # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    }

    description = (
        "**–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ê–¶–ö** üìÑ\n\n"
        "–≠—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ—à–∞–≥–æ–≤–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¶–ò–¢–ü.\n\n"
        "**–ß—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç:**\n"
        "1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–ø–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–§–ò–û, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ —Ç.–¥.).\n"
        "2. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ –±—É–¥—É—â–µ–º.\n"
        "3. –ü—Ä–æ—Å–∏—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å **–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ** —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.\n"
        "4. –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –≤ –∑–∞—è–≤–∫–µ.\n"
        "5. –í –∏—Ç–æ–≥–µ —Å–æ–∑–¥–∞–µ—Ç **ZIP-–∞—Ä—Ö–∏–≤**, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≥–æ—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ **DOCX** –∏ –≤—Å–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã.\n\n"
        "------------------------------------\n\n"
    )

    defaults = load_akc_defaults(user_id)
    if defaults:
        context.user_data['akc_form'].update(defaults)
        text = description + (
            "–ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–ø–∫–∏ –∑–∞—è–≤–∫–∏:\n\n"
            f"‚Ä¢ **–û—Ç –∫–æ–≥–æ:** {defaults['sender_fio']}\n"
            f"‚Ä¢ **–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ:** {defaults['org_name']}\n"
            f"‚Ä¢ **–ò–ù–ù/–ö–ü–ü:** {defaults['inn_kpp']}\n"
            f"‚Ä¢ **–ú–û:** {defaults['municipality']}\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?"
        )
        keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data='akc_use_defaults')], [InlineKeyboardButton("‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='akc_refill')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        return AKC_CONFIRM_DEFAULTS
    else:
        text = description + "–ù–∞—á–∏–Ω–∞–µ–º! –í–≤–µ–¥–∏—Ç–µ **–§–ò–û –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è**:"
        await update.message.reply_text(text, parse_mode='Markdown')
        return AKC_SENDER_FIO

async def akc_use_defaults(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —à–∞–ø–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–î–∞–Ω–Ω—ã–µ —à–∞–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.")
    
    keyboard = ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True, one_time_keyboard=True)
    await query.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ **–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ** —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (.cer, .crt).\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–ì–æ—Ç–æ–≤–æ'**.",
        reply_markup=keyboard
    )
    return AKC_AWAIT_CERTIFICATES

async def akc_refill_defaults(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–ø–∫–∏ –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.\n\n–í–≤–µ–¥–∏—Ç–µ **–§–ò–û –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è**:", parse_mode='Markdown')
    return AKC_SENDER_FIO

async def akc_get_sender_fio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['akc_form']['sender_fio'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ **–ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è**:", parse_mode='Markdown')
    return AKC_ORG_NAME

async def akc_get_org_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['akc_form']['org_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ **–ò–ù–ù/–ö–ü–ü** —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:", parse_mode='Markdown')
    return AKC_INN_KPP

async def akc_get_inn_kpp(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['akc_form']['inn_kpp'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ **–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è**:", parse_mode='Markdown')
    return AKC_MUNICIPALITY

async def akc_get_municipality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ú–û, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã."""
    user_id = update.effective_user.id
    context.user_data['akc_form']['municipality'] = update.message.text
    save_akc_defaults(user_id, context.user_data['akc_form'])
    await update.message.reply_text("–®–∞–ø–∫–∞ –∑–∞—è–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    
    keyboard = ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ **–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ** —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (.cer, .crt).\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–ì–æ—Ç–æ–≤–æ'**.",
        reply_markup=keyboard
    )
    return AKC_AWAIT_CERTIFICATES

async def akc_add_certificate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    document = update.message.document
    file_id = document.file_id
    
    try:
        file_object = await context.bot.get_file(file_id)
        file_buffer = io.BytesIO()
        await file_object.download_to_memory(file_buffer)
        cert_bytes = file_buffer.getvalue()
        
        cert_data = get_certificate_info(cert_bytes)
        
        if not cert_data:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ `{document.file_name}`. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.", parse_mode='Markdown')
            return AKC_AWAIT_CERTIFICATES

        context.user_data['akc_form']['certificates'].append({
            'cert_owner': cert_data['–§–ò–û'],
            'cert_serial': cert_data['–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä'],
            'cert_filename': document.file_name,
            'cert_bytes': cert_bytes,
            'role': '', 'citp_name': '', 'logins': '', 'action': ''
        })
        
        await update.message.reply_text(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç `{document.file_name}` –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
        
    return AKC_AWAIT_CERTIFICATES

async def akc_start_data_loop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ü–∏–∫–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    if not context.user_data['akc_form'].get('certificates'):
        await update.message.reply_text("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        context.user_data.pop('akc_form', None)
        return ConversationHandler.END

    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–Ω—è—Ç—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏.", reply_markup=ReplyKeyboardRemove())
    context.user_data['akc_form']['cert_index'] = 0
    await _akc_ask_for_role(update, context)
    return AKC_ROLE

async def _akc_ask_for_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–æ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    cert_index = context.user_data['akc_form']['cert_index']
    cert_list = context.user_data['akc_form']['certificates']
    cert_data = cert_list[cert_index]
    cert_owner = cert_data['cert_owner']
    
    text = (
        f"‚û°Ô∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏ {cert_index + 1} –∏–∑ {len(cert_list)}**\n"
        f"–í–ª–∞–¥–µ–ª–µ—Ü: **{cert_owner}**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ **—Ä–æ–ª—å —Å—É–±—ä–µ–∫—Ç–∞**:"
    )
    keyboard = [
        [InlineKeyboardButton("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data='role_–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å')],
        [InlineKeyboardButton("–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", callback_data='role_–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')],
        [InlineKeyboardButton("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ì–ò–° –ì–ú–ü", callback_data='role_–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ì–ò–° –ì–ú–ü')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def akc_get_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    query = update.callback_query
    await query.answer()
    role = query.data.split('_')[1]
    
    cert_index = context.user_data['akc_form']['cert_index']
    context.user_data['akc_form']['certificates'][cert_index]['role'] = role

    keyboard = [[InlineKeyboardButton("–ê–¶–ö-–§–∏–Ω–∞–Ω—Å—ã", callback_data='citp_–ê–¶–ö-–§–∏–Ω–∞–Ω—Å—ã')], [InlineKeyboardButton("–ê–¶–ö-–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='citp_–ê–¶–ö-–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {role}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ **–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¶–ò–¢–ü**:", reply_markup=reply_markup, parse_mode='Markdown')
    return AKC_CITP_NAME

async def akc_get_citp_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –¶–ò–¢–ü –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã."""
    query = update.callback_query
    await query.answer()
    citp_name = query.data.split('_')[1]

    cert_index = context.user_data['akc_form']['cert_index']
    context.user_data['akc_form']['certificates'][cert_index]['citp_name'] = citp_name
    
    user_id = update.effective_user.id
    saved_logins = load_akc_logins(user_id)
    
    if saved_logins:
        context.user_data['akc_saved_logins'] = saved_logins
        text = (
            f"–í—ã–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {citp_name}.\n\n"
            f"–ù–∞–π–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã: `{saved_logins}`\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö?"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data='logins_use_saved')],
            [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ", callback_data='logins_enter_new')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        return AKC_CONFIRM_LOGINS
    else:
        await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {citp_name}.\n\n–í–≤–µ–¥–∏—Ç–µ **–∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–≥–∏–Ω—ã)**, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", parse_mode='Markdown')
        return AKC_LOGINS

async def akc_use_saved_logins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã."""
    query = update.callback_query
    await query.answer()
    
    saved_logins = context.user_data.get('akc_saved_logins')
    cert_index = context.user_data['akc_form']['cert_index']
    context.user_data['akc_form']['certificates'][cert_index]['logins'] = saved_logins
    
    keyboard = [[InlineKeyboardButton(text, callback_data=f'action_{text}') for text in ["–î–æ–±–∞–≤–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å"]], [InlineKeyboardButton(text, callback_data=f'action_{text}') for text in ["–ó–∞–º–µ–Ω–∏—Ç—å", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"]]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–õ–æ–≥–∏–Ω—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ **–¥–µ–π—Å—Ç–≤–∏–µ** —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º:", reply_markup=reply_markup, parse_mode='Markdown')
    
    context.user_data.pop('akc_saved_logins', None)
    return AKC_ACTION

async def akc_enter_new_logins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤—ã—Ö –ª–æ–≥–∏–Ω–æ–≤."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–≥–∏–Ω—ã)**, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", parse_mode='Markdown')
    return AKC_LOGINS

async def akc_get_logins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –ª–æ–≥–∏–Ω—ã."""
    user_id = update.effective_user.id
    logins = update.message.text
    
    cert_index = context.user_data['akc_form']['cert_index']
    context.user_data['akc_form']['certificates'][cert_index]['logins'] = logins
    save_akc_logins(user_id, logins)
    
    keyboard = [[InlineKeyboardButton(text, callback_data=f'action_{text}') for text in ["–î–æ–±–∞–≤–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å"]], [InlineKeyboardButton(text, callback_data=f'action_{text}') for text in ["–ó–∞–º–µ–Ω–∏—Ç—å", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"]]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–æ–≤—ã–µ –ª–æ–≥–∏–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ **–¥–µ–π—Å—Ç–≤–∏–µ** —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º:", reply_markup=reply_markup, parse_mode='Markdown')
    return AKC_ACTION

async def akc_get_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Ä–µ—à–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ü–∏–∫–ª –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å."""
    query = update.callback_query
    await query.answer()
    action = query.data.split('_')[1]

    cert_index = context.user_data['akc_form']['cert_index']
    context.user_data['akc_form']['certificates'][cert_index]['action'] = action

    cert_index += 1
    context.user_data['akc_form']['cert_index'] = cert_index

    if cert_index < len(context.user_data['akc_form']['certificates']):
        await _akc_ask_for_role(update, context)
        return AKC_ROLE
    else:
        await query.edit_message_text("–í—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π ZIP-–∞—Ä—Ö–∏–≤...")
        await akc_finish(update, context)
        context.user_data.pop('akc_form', None)
        return ConversationHandler.END

async def akc_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ZIP-–∞—Ä—Ö–∏–≤."""
    form_data = context.user_data['akc_form']
    try:
        docx_buffer = create_akc_docx(form_data)
        docx_filename = f"–ó–∞—è–≤–∫–∞_–ê–¶–ö_{form_data.get('sender_fio', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}.docx"
        
        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, 'w') as zip_file:
            zip_file.writestr(docx_filename, docx_buffer.getvalue())
            for cert_data in form_data.get('certificates', []):
                if cert_data.get('cert_bytes') and cert_data.get('cert_filename'):
                    zip_file.writestr(cert_data['cert_filename'], cert_data['cert_bytes'])
        zip_buffer.seek(0)
        
        zip_filename = f"–ó–∞—è–≤–∫–∞_–ê–¶–ö_{form_data.get('sender_fio', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}.zip"
        
        await context.bot.send_document(chat_id=update.effective_chat.id, document=zip_buffer, filename=zip_filename, caption="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ ZIP-–∞—Ä—Ö–∏–≤–µ.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ZIP-–∞—Ä—Ö–∏–≤–∞: {e}", exc_info=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞.")

# --- –õ–û–ì–ò–ö–ê –î–ò–ê–õ–û–ì–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–û–°–¢–£–ü–û–ú ---
async def access_management_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º."""
    if not has_permission(update.effective_user.id, "admin", context): return ConversationHandler.END
    await _show_access_menu(update, context)
    return ACCESS_MENU

async def _show_access_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message_id: int = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    permissions_dict = context.bot_data.get('permissions', {})
    
    text_lines = ["**üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º**\n\n–¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö –ø—Ä–∞–≤–∞:"]
    user_list_empty = True
    for user_id, user_data in permissions_dict.items():
        user_list_empty = False
        perms = user_data.get('perms', set())
        name = user_data.get('name', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}')
        perms_str = ", ".join([AVAILABLE_PERMISSIONS.get(p, p) for p in perms])
        text_lines.append(f"‚Ä¢ {name} (`{user_id}`): {perms_str}")

    if user_list_empty:
        text_lines.append("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏.")

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='access_add')],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='access_delete')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='access_back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = update.message or update.callback_query.message
    if message_id:
        await context.bot.edit_message_text(chat_id=message.chat_id, message_id=message_id, text="\n".join(text_lines), reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await message.reply_text("\n".join(text_lines), reply_markup=reply_markup, parse_mode='Markdown')

async def access_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    return ConversationHandler.END

async def prompt_add_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "**–°–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n"
        "1. **–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ** - —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç ID –∏ –∏–º—è.\n"
        "2. **–í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é** - –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID.",
        parse_mode='Markdown'
    )
    return AWAITING_USER_INFO

async def get_user_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID."""
    user_to_add = None
    user_id = None
    user_name = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.forward_origin and isinstance(update.message.forward_origin, MessageOriginUser):
        user_to_add = update.message.forward_origin.sender_user
        user_id = user_to_add.id
        user_name = user_to_add.full_name
    # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ ID
    else:
        try:
            user_id = int(update.message.text)
            user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}" # –ò–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        except (ValueError, TypeError):
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ª–∏–±–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
            return AWAITING_USER_INFO
            
    context.user_data['new_user_id'] = user_id
    context.user_data['new_user_name'] = user_name
    context.user_data['new_user_perms'] = set()
    
    await _show_permission_selection(update, context)
    return AWAITING_PERMISSIONS

async def _show_permission_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π."""
    new_user_id = context.user_data['new_user_id']
    new_user_name = context.user_data['new_user_name']
    selected_perms = context.user_data['new_user_perms']
    
    keyboard = []
    for perm_key, perm_name in AVAILABLE_PERMISSIONS.items():
        is_selected = "‚úÖ" if perm_key in selected_perms else "‚òëÔ∏è"
        keyboard.append([InlineKeyboardButton(f"{is_selected} {perm_name}", callback_data=f"perm_{perm_key}")])
    
    keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="perm_save")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è **{new_user_name}** (`{new_user_id}`):"
    
    message = update.message or update.callback_query.message
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –ø—Ä–æ—Å—å–±–æ–π –ø–µ—Ä–µ—Å–ª–∞—Ç—å) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await message.delete()
    await message.chat.send_message(text, reply_markup=reply_markup, parse_mode='Markdown')

async def toggle_permission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    perm_key = query.data.split('_', 1)[1]
    selected_perms = context.user_data['new_user_perms']
    
    if perm_key in selected_perms:
        selected_perms.remove(perm_key)
    else:
        selected_perms.add(perm_key)
        
    await _show_permission_selection(update, context)
    return AWAITING_PERMISSIONS

async def save_new_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–∞–≤–∞."""
    query = update.callback_query
    await query.answer()
    
    user_id = context.user_data['new_user_id']
    username = context.user_data['new_user_name']
    permissions = context.user_data['new_user_perms']
    
    if not permissions:
        await query.edit_message_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        db_save_user_permissions(user_id, username, permissions)
        context.bot_data['permissions'] = db_load_all_permissions() # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{username}** (`{user_id}`) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.", parse_mode='Markdown')

    context.user_data.clear()
    
    await _show_access_menu(update, context, message_id=query.message.message_id)
    return ACCESS_MENU

async def prompt_delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    permissions_dict = context.bot_data.get('permissions', {})
    keyboard = []
    
    for user_id, user_data in permissions_dict.items():
        if user_id == ADMIN_USER_ID: continue
        name = user_data.get('name', user_id)
        keyboard.append([InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {name} (`{user_id}`)", callback_data=f"del_{user_id}")])
        
    if not keyboard:
        await query.edit_message_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await _show_access_menu(update, context, message_id=query.message.message_id)
        return ACCESS_MENU
        
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='access_show_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup, parse_mode='Markdown')
    return AWAITING_USER_TO_DELETE

async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    user_id_to_delete = int(query.data.split('_')[1])
    
    db_delete_user(user_id_to_delete)
    context.bot_data['permissions'] = db_load_all_permissions() # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    
    await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id_to_delete}` —É–¥–∞–ª–µ–Ω.", parse_mode='Markdown')
    
    await _show_access_menu(update, context, message_id=query.message.message_id)
    return ACCESS_MENU

async def return_to_access_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º."""
    query = update.callback_query
    await query.answer()
    await _show_access_menu(update, context, message_id=query.message.message_id)
    return ACCESS_MENU

# --- 6. –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---
async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN or not DATABASE_URL:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
        
    init_database()
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    application.bot_data['permissions'] = db_load_all_permissions()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    authorized_user_filter = filters.User(user_id=application.bot_data['permissions'].keys())

    cancel_handler = MessageHandler(filters.Regex('^/cancel$') | filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel)
    
    cert_analysis_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("cert", cert_analysis_start),
            MessageHandler(filters.Regex('^üìú –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤$'), cert_analysis_start)
        ],
        states={
            CERT_AWAIT_FILES: [
                MessageHandler(filters.Document.ALL, handle_cert_upload),
                MessageHandler(filters.Regex('^–ì–æ—Ç–æ–≤–æ$'), ask_for_threshold_confirmation)
            ],
            CERT_AWAIT_THRESHOLD: [
                CallbackQueryHandler(process_with_current_threshold, pattern='^cert_use_current$'),
                CallbackQueryHandler(prompt_for_new_threshold, pattern='^cert_enter_new$')
            ],
            CERT_TYPING_THRESHOLD: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_new_threshold_and_process)],
        },
        fallbacks=[cancel_handler],
    )

    youtube_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üé¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å YouTube$'), youtube_entry)],
        states={
            AWAITING_YOUTUBE_LINK: [MessageHandler(filters.Regex(YOUTUBE_URL_PATTERN), handle_youtube_link)],
            CONFIRMING_DOWNLOAD: [CallbackQueryHandler(start_download_confirmed, pattern='^yt_confirm$'), CallbackQueryHandler(cancel_download, pattern='^yt_cancel$')]
        },
        fallbacks=[cancel_handler]
    )
    
    akc_cert_filter = filters.Document.FileExtension("cer") | filters.Document.FileExtension("crt")
    
    akc_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üìÑ –ó–∞—è–≤–∫–∞ –ê–¶–ö$'), akc_start)],
        states={
            AKC_CONFIRM_DEFAULTS: [CallbackQueryHandler(akc_use_defaults, pattern='^akc_use_defaults$'), CallbackQueryHandler(akc_refill_defaults, pattern='^akc_refill$')],
            AKC_SENDER_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, akc_get_sender_fio)],
            AKC_ORG_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, akc_get_org_name)],
            AKC_INN_KPP: [MessageHandler(filters.TEXT & ~filters.COMMAND, akc_get_inn_kpp)],
            AKC_MUNICIPALITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, akc_get_municipality)],
            AKC_AWAIT_CERTIFICATES: [
                MessageHandler(akc_cert_filter, akc_add_certificate),
                MessageHandler(filters.Regex('^–ì–æ—Ç–æ–≤–æ$'), akc_start_data_loop)
            ],
            AKC_ROLE: [CallbackQueryHandler(akc_get_role, pattern='^role_')],
            AKC_CITP_NAME: [CallbackQueryHandler(akc_get_citp_name, pattern='^citp_')],
            AKC_CONFIRM_LOGINS: [
                CallbackQueryHandler(akc_use_saved_logins, pattern='^logins_use_saved$'),
                CallbackQueryHandler(akc_enter_new_logins, pattern='^logins_enter_new$')
            ],
            AKC_LOGINS: [MessageHandler(filters.TEXT & ~filters.COMMAND, akc_get_logins)],
            AKC_ACTION: [CallbackQueryHandler(akc_get_action, pattern='^action_')],
        },
        fallbacks=[cancel_handler],
        per_message=False
    )

    access_management_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º$'), access_management_start)],
        states={
            ACCESS_MENU: [
                CallbackQueryHandler(prompt_add_user, pattern='^access_add$'),
                CallbackQueryHandler(prompt_delete_user, pattern='^access_delete$'),
                CallbackQueryHandler(access_back, pattern='^access_back$'),
            ],
            AWAITING_USER_INFO: [
                MessageHandler(filters.FORWARDED, get_user_info),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_user_info)
            ],
            AWAITING_PERMISSIONS: [
                CallbackQueryHandler(save_new_user, pattern='^perm_save$'),
                CallbackQueryHandler(toggle_permission, pattern='^perm_'),
            ],
            AWAITING_USER_TO_DELETE: [
                CallbackQueryHandler(delete_user, pattern='^del_'),
                CallbackQueryHandler(return_to_access_menu, pattern='^access_show_menu$'),
            ]
        },
        fallbacks=[cancel_handler]
    )

    application.add_handler(cert_analysis_conv_handler)
    application.add_handler(youtube_conv_handler)
    application.add_handler(akc_conv_handler)
    application.add_handler(access_management_conv)
    
    application.add_handler(CommandHandler("my_id", get_my_id))
    application.add_handler(CommandHandler("start", start, filters=authorized_user_filter))
    
    application.add_handler(MessageHandler(filters.Regex("^(‚ùì –ü–æ–º–æ—â—å)$") & authorized_user_filter, help_command))

    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    async with application:
        await application.start()
        await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        await asyncio.Future()


# --- 7. –¢–û–ß–ö–ê –í–•–û–î–ê ---
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

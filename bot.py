import os
import logging
from datetime import datetime, timedelta
import zipfile
import io
from typing import List, Dict, Any, Optional, Tuple, Set
import asyncio
from threading import Thread

from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, Message
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, BaseFilter
from dotenv import load_dotenv
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from openpyxl import Workbook
from openpyxl.styles import PatternFill
from openpyxl.utils import get_column_letter

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ---
# –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É /my_id.
# –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞—à ID. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞.
# –ù–∞–ø—Ä–∏–º–µ—Ä: ALLOWED_USER_IDS = {123456789, 987654321}
ALLOWED_USER_IDS: Set[int] = {123456789} # <--- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û –ù–ê –í–ê–® ID

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (–∑–¥–µ—Å—å 20 –ú–ë)
MAX_FILE_SIZE = 20 * 1024 * 1024

# --- –û–ë–©–ò–ï –ö–û–ù–°–¢–ê–ù–¢–´ ---
EXPIRATION_THRESHOLD_DAYS = 30
RED_FILL = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
ORANGE_FILL = PatternFill(start_color="FFDDAA", end_color="FFDDAA", fill_type="solid")
GREEN_FILL = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")
EXCEL_HEADERS: Tuple[str, ...] = ("–§–ò–û", "–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ", "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π")
ALLOWED_EXTENSIONS: Tuple[str, ...] = ('.cer', '.crt', '.pem', '.der')


# --- –ö–æ–¥ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ "–æ–±–º–∞–Ω–∫–∏" ---
flask_app = Flask(__name__)

@flask_app.route('/')
def index():
    """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç UptimeRobot."""
    return "I am alive!"

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask-—Å–µ—Ä–≤–µ—Ä."""
    # Render –∏ –¥—Ä—É–≥–∏–µ —Ö–æ—Å—Ç–∏–Ω–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—è—Ç –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    port = int(os.environ.get("PORT", 8080))
    flask_app.run(host='0.0.0.0', port=port)


# --- –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ ---
class AllowedUserFilter(BaseFilter):
    def __init__(self, user_ids: Set[int]):
        self.allowed_ids = user_ids

    def filter(self, message: Message) -> bool:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
        return message.from_user.id in self.allowed_ids

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
allowed_users_filter = AllowedUserFilter(ALLOWED_USER_IDS)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_certificate_info(cert_bytes: bytes) -> Optional[Dict[str, Any]]:
    try:
        try:
            cert = x509.load_pem_x509_certificate(cert_bytes, default_backend())
        except ValueError:
            cert = x509.load_der_x509_certificate(cert_bytes, default_backend())
        try:
            subject_common_name = cert.subject.get_attributes_for_oid(x509.OID_COMMON_NAME)[0].value
        except IndexError:
            subject_common_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        try:
            organization_name = cert.subject.get_attributes_for_oid(x509.OID_ORGANIZATION_NAME)[0].value
        except IndexError:
            organization_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        serial_number = f"{cert.serial_number:X}"
        valid_from = cert.not_valid_before.date()
        valid_until = cert.not_valid_after.date()
        days_left = (valid_until - datetime.now().date()).days
        return {"–§–ò–û": subject_common_name, "–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ": organization_name, "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä": serial_number, "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å": valid_from, "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ": valid_until, "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π": days_left}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return None

def create_excel_report(cert_data_list: List[Dict[str, Any]]) -> io.BytesIO:
    wb = Workbook()
    ws = wb.active
    ws.title = "–û—Ç—á–µ—Ç –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º"
    ws.append(list(EXCEL_HEADERS))
    sorted_cert_data = sorted(cert_data_list, key=lambda x: x["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ"])
    for cert_data in sorted_cert_data:
        row = [cert_data["–§–ò–û"], cert_data["–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ"], cert_data["–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"], cert_data["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å"].strftime("%d.%m.%Y"), cert_data["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ"].strftime("%d.%m.%Y"), cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]]
        ws.append(row)
        last_row = ws.max_row
        days_left = cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]
        fill_color = None
        if days_left < 0: fill_color = RED_FILL
        elif 0 <= days_left <= EXPIRATION_THRESHOLD_DAYS: fill_color = ORANGE_FILL
        else: fill_color = GREEN_FILL
        if fill_color:
            for cell in ws[last_row]: cell.fill = fill_color
    for column in ws.columns:
        max_length = 0
        column_letter = get_column_letter(column[0].column)
        for cell in column:
            try:
                if len(str(cell.value)) > max_length: max_length = len(str(cell.value))
            except: pass
        adjusted_width = (max_length + 2)
        ws.column_dimensions[column_letter].width = adjusted_width
    excel_buffer = io.BytesIO()
    wb.save(excel_buffer)
    excel_buffer.seek(0)
    return excel_buffer

def generate_summary_message(cert_data_list: List[Dict[str, Any]]) -> str:
    expired_certs, expiring_soon_certs = [], []
    for cert_data in cert_data_list:
        days_left = cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]
        if days_left < 0: expired_certs.append(f"üë§ {cert_data['–§–ò–û']} ‚Äî {cert_data['–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ'].strftime('%d.%m.%Y')} (–∏—Å—Ç—ë–∫ {abs(days_left)} –¥–Ω.)")
        elif 0 <= days_left <= EXPIRATION_THRESHOLD_DAYS: expiring_soon_certs.append(f"üë§ {cert_data['–§–ò–û']} ‚Äî {cert_data['–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ'].strftime('%d.%m.%Y')} - –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π ‚Äì {days_left}.")
    message_parts = []
    if expired_certs: message_parts.extend(["‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:", *expired_certs, "\n"])
    if expiring_soon_certs: message_parts.extend([f"‚ö†Ô∏è –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç ({EXPIRATION_THRESHOLD_DAYS} –¥–Ω–µ–π):", *expiring_soon_certs])
    return "\n".join(message_parts) if message_parts else "‚úÖ –í—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ –∏–º–µ—é—Ç –±–æ–ª—å—à–æ–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è."

def _process_file_content(file_bytes: bytes, file_name: str) -> List[Dict[str, Any]]:
    all_certs_data = []
    if file_name.lower().endswith(".zip"):
        try:
            with zipfile.ZipFile(io.BytesIO(file_bytes), 'r') as z:
                for member in z.namelist():
                    if member.lower().endswith(ALLOWED_EXTENSIONS):
                        with z.open(member) as cert_file:
                            cert_info = get_certificate_info(cert_file.read())
                            if cert_info: all_certs_data.append(cert_info)
        except zipfile.BadZipFile:
            logger.error(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π ZIP-—Ñ–∞–π–ª: {file_name}", exc_info=True)
            return []
    elif file_name.lower().endswith(ALLOWED_EXTENSIONS):
        cert_info = get_certificate_info(file_bytes)
        if cert_info: all_certs_data.append(cert_info)
    return all_certs_data


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ Telegram User ID."""
    user_id = update.effective_user.id
    await update.message.reply_text(f"–í–∞—à User ID: `{user_id}`\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `ALLOWED_USER_IDS` –≤ –∫–æ–¥–µ –±–æ—Ç–∞.", parse_mode='MarkdownV2')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    keyboard = [
        ["üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "üìÑ –ó–∞—è–≤–∫–∞ –ê–ö–¶"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    start_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤. –ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Äì –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ .cer, .crt, .pem, .der\n"
        "‚Äì –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–æ–≤ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏\n"
        "‚Äì –°–æ–∑–¥–∞–Ω–∏–µ Excel-–æ—Ç—á–µ—Ç–∞ —Å–æ —Å—Ä–æ–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await update.message.reply_html(start_message, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª(—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ ({', '.join(ALLOWED_EXTENSIONS)}) –∏–ª–∏ ZIP-–∞—Ä—Ö–∏–≤.")

async def request_certificate_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª(—ã) —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ "
        f"({', '.join(ALLOWED_EXTENSIONS)}) –∏–ª–∏ ZIP-–∞—Ä—Ö–∏–≤ —Å –Ω–∏–º–∏.\n"
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö –∏ –ø—Ä–∏—à–ª—é –≤–∞–º –æ—Ç—á–µ—Ç."
    )

async def settings_placeholder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!")

async def acc_finance_placeholder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É-–∑–∞–≥–ª—É—à–∫—É '–ó–∞—è–≤–∫–∞ –ê–ö–¶'.")
    message_text = (
        "üìà **–§—É–Ω–∫—Ü–∏—è '–ó–∞—è–≤–∫–∞ –ê–ö–¶-–§–∏–Ω–∞–Ω—Å—ã' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.**\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É "
        "–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¶–ò–¢–ü –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.\n\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    )
    await update.message.reply_html(message_text)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    document = update.message.document
    file_name = document.file_name
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç(—ã), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    try:
        file_object = await context.bot.get_file(document.file_id)
        file_buffer = io.BytesIO()
        await file_object.download_to_memory(file_buffer)
        file_buffer.seek(0)
        all_certs_data = _process_file_content(file_buffer.read(), file_name)
        if not all_certs_data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ/–∞—Ä—Ö–∏–≤–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            return
        excel_buffer = create_excel_report(all_certs_data)
        summary_message = generate_summary_message(all_certs_data)
        await update.message.reply_text(summary_message)
        await update.message.reply_document(document=excel_buffer, filename="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã_–æ—Ç—á–µ—Ç.xlsx")
        logger.info(f"–û—Ç—á–µ—Ç –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_wrong_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    file_name = update.message.document.file_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {file_name}")
    allowed_ext_str = ", ".join(ALLOWED_EXTENSIONS)
    await update.message.reply_text(
        f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n\n"
        f"–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏: {allowed_ext_str}, –∞ —Ç–∞–∫–∂–µ .zip –∞—Ä—Ö–∏–≤—ã."
    )


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---

async def main() -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID. –£ –Ω–µ–µ –ù–ï–¢ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–∞.
    application.add_handler(CommandHandler("my_id", get_my_id))

    # –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    application.add_handler(CommandHandler("start", start, filters=allowed_users_filter))
    application.add_handler(CommandHandler("help", help_command, filters=allowed_users_filter))

    # –ö–Ω–æ–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex("‚ùì –ü–æ–º–æ—â—å") & allowed_users_filter, help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex("üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç") & allowed_users_filter, request_certificate_files))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏") & allowed_users_filter, settings_placeholder))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex("üìÑ –ó–∞—è–≤–∫–∞ –ê–ö–¶") & allowed_users_filter, acc_finance_placeholder))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –¥–æ—Å—Ç—É–ø—É
    allowed_extensions_filter = (
        filters.Document.FileExtension("zip") |
        filters.Document.FileExtension("cer") |
        filters.Document.FileExtension("crt") |
        filters.Document.FileExtension("pem") |
        filters.Document.FileExtension("der")
    )
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    application.add_handler(MessageHandler(
        allowed_extensions_filter & ~filters.COMMAND & allowed_users_filter & filters.Document.MAX_SIZE(MAX_FILE_SIZE),
        handle_document
    ))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    application.add_handler(MessageHandler(
        filters.Document.ALL & ~filters.COMMAND & allowed_users_filter & filters.Document.MAX_SIZE(MAX_FILE_SIZE),
        handle_wrong_document
    ))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        async with application:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            flask_thread = Thread(target=run_flask)
            flask_thread.daemon = True
            flask_thread.start()
            logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω.")
            
            await application.start()
            await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            await asyncio.Future()
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ ---

if __name__ == "__main__":
    asyncio.run(main())
# =================================================================================
#   –§–ê–ô–õ: bot.py (V3.1 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ù–û–ü–û–ö –ò –û–¢–ú–ï–ù–´ –î–ò–ê–õ–û–ì–û–í)
# =================================================================================

# --- 1. –ò–ú–ü–û–†–¢–´ ---
import os
import logging
import asyncio
from datetime import datetime
import zipfile
import io
from typing import List, Dict, Any, Optional, Tuple, Set
import psycopg2
import yt_dlp
import telegram
import uuid
import time
import docx
from docx.enum.section import WD_ORIENT
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.shared import Cm, Pt

from telegram import Update, ReplyKeyboardMarkup, Message, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from openpyxl import Workbook
from openpyxl.styles import PatternFill
from openpyxl.utils import get_column_letter
from dotenv import load_dotenv

load_dotenv()


# --- 2. –ù–ê–°–¢–†–û–ô–ö–ê –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.environ.get("DATABASE_URL")

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

ALLOWED_USER_IDS: Set[int] = {96238783}
user_filter = filters.User(user_id=ALLOWED_USER_IDS)

MAX_FILE_SIZE = 20 * 1024 * 1024
MAX_VIDEO_SIZE_BYTES = 49 * 1024 * 1024
EXPIRATION_THRESHOLD_DAYS = 30
RED_FILL = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
ORANGE_FILL = PatternFill(start_color="FFDDAA", end_color="FFDDAA", fill_type="solid")
GREEN_FILL = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")
EXCEL_HEADERS: Tuple[str, ...] = ("–§–ò–û", "–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ", "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π")
ALLOWED_EXTENSIONS: Tuple[str, ...] = ('.cer', '.crt', '.pem', '.der')
YOUTUBE_URL_PATTERN = r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
(
    CHOOSING_ACTION, TYPING_DAYS, AWAITING_YOUTUBE_LINK, CONFIRMING_DOWNLOAD,
    AKC_CONFIRM_DEFAULTS, AKC_SENDER_FIO, AKC_ORG_NAME, AKC_INN_KPP, AKC_MUNICIPALITY,
    AKC_AWAIT_CERTIFICATE, AKC_ROLE, AKC_CITP_NAME, AKC_LOGINS, AKC_ACTION
) = range(14)


# --- 3. –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• POSTGRESQL ---
def get_db_connection():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def init_database():
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cursor:
            cursor.execute('CREATE TABLE IF NOT EXISTS user_settings (user_id BIGINT PRIMARY KEY, threshold INTEGER NOT NULL)')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS akc_sender_defaults (
                    user_id BIGINT PRIMARY KEY,
                    sender_fio TEXT NOT NULL,
                    org_name TEXT NOT NULL,
                    inn_kpp TEXT NOT NULL,
                    municipality TEXT NOT NULL
                )
            ''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
    finally:
        if conn: conn.close()

def save_user_threshold(user_id: int, threshold: int):
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cursor:
            cursor.execute("INSERT INTO user_settings (user_id, threshold) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET threshold = EXCLUDED.threshold;",(user_id, threshold))
        conn.commit()
    finally:
        if conn: conn.close()

def load_user_threshold(user_id: int) -> Optional[int]:
    conn = get_db_connection()
    if not conn: return None
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT threshold FROM user_settings WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
        return result[0] if result else None
    finally:
        if conn: conn.close()

async def get_user_threshold(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> int:
    if 'threshold' in context.user_data:
        return context.user_data['threshold']
    threshold_from_db = load_user_threshold(user_id)
    if threshold_from_db is not None:
        context.user_data['threshold'] = threshold_from_db
        return threshold_from_db
    return EXPIRATION_THRESHOLD_DAYS

def save_akc_defaults(user_id: int, form_data: dict):
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO akc_sender_defaults (user_id, sender_fio, org_name, inn_kpp, municipality) "
                "VALUES (%s, %s, %s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET "
                "sender_fio = EXCLUDED.sender_fio, org_name = EXCLUDED.org_name, "
                "inn_kpp = EXCLUDED.inn_kpp, municipality = EXCLUDED.municipality;",
                (user_id, form_data['sender_fio'], form_data['org_name'], form_data['inn_kpp'], form_data['municipality'])
            )
        conn.commit()
        logger.info(f"–®–∞–±–ª–æ–Ω –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è {user_id}: {e}")
    finally:
        if conn: conn.close()

def load_akc_defaults(user_id: int) -> Optional[Dict[str, str]]:
    conn = get_db_connection()
    if not conn: return None
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT sender_fio, org_name, inn_kpp, municipality FROM akc_sender_defaults WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
        if result:
            return {
                'sender_fio': result[0],
                'org_name': result[1],
                'inn_kpp': result[2],
                'municipality': result[3]
            }
        return None
    finally:
        if conn: conn.close()


# --- 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def create_excel_report(cert_data_list: List[Dict[str, Any]], user_threshold: int) -> io.BytesIO:
    wb = Workbook(); ws = wb.active; ws.title = "–û—Ç—á–µ—Ç –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º"
    ws.append(list(EXCEL_HEADERS)); sorted_cert_data = sorted(cert_data_list, key=lambda x: x["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ"])
    for cert_data in sorted_cert_data:
        row = [cert_data["–§–ò–û"], cert_data["–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ"], cert_data["–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"], cert_data["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å"].strftime("%d.%m.%Y"), cert_data["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ"].strftime("%d.%m.%Y"), cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]]
        ws.append(row); last_row = ws.max_row; days_left = cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]
        fill_color = None
        if days_left < 0: fill_color = RED_FILL
        elif 0 <= days_left <= user_threshold: fill_color = ORANGE_FILL
        else: fill_color = GREEN_FILL
        if fill_color:
            for cell in ws[last_row]: cell.fill = fill_color
    for column in ws.columns:
        max_length = 0; column_letter = get_column_letter(column[0].column)
        for cell in column:
            try:
                if len(str(cell.value)) > max_length: max_length = len(str(cell.value))
            except: pass
        adjusted_width = (max_length + 2); ws.column_dimensions[column_letter].width = adjusted_width
    excel_buffer = io.BytesIO(); wb.save(excel_buffer); excel_buffer.seek(0)
    return excel_buffer

def generate_summary_message(cert_data_list: List[Dict[str, Any]], user_threshold: int) -> str:
    expiring_soon_certs = []
    for cert_data in cert_data_list:
        days_left = cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]
        if 0 <= days_left <= user_threshold:
            expiring_soon_certs.append(f"üë§ {cert_data['–§–ò–û']} ‚Äî {cert_data['–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ'].strftime('%d.%m.%Y')} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)")
    if expiring_soon_certs:
        message_parts = [f"‚ö†Ô∏è –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç ({user_threshold} –¥–Ω–µ–π):", *expiring_soon_certs]
        return "\n".join(message_parts)
    else: return "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

def get_certificate_info(cert_bytes: bytes) -> Optional[Dict[str, Any]]:
    try:
        try: cert = x509.load_pem_x509_certificate(cert_bytes, default_backend())
        except ValueError: cert = x509.load_der_x509_certificate(cert_bytes, default_backend())
        try: subject_common_name = cert.subject.get_attributes_for_oid(x509.OID_COMMON_NAME)[0].value
        except IndexError: subject_common_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        try: organization_name = cert.subject.get_attributes_for_oid(x509.OID_ORGANIZATION_NAME)[0].value
        except IndexError: organization_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        serial_number = f"{cert.serial_number:X}"; valid_from = cert.not_valid_before.date(); valid_until = cert.not_valid_after.date()
        days_left = (valid_until - datetime.now().date()).days
        return {"–§–ò–û": subject_common_name, "–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ": organization_name, "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä": serial_number, "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å": valid_from, "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ": valid_until, "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π": days_left}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}"); return None

def _process_file_content(file_bytes: bytes, file_name: str) -> List[Dict[str, Any]]:
    all_certs_data = []
    if file_name.lower().endswith(".zip"):
        try:
            with zipfile.ZipFile(io.BytesIO(file_bytes), 'r') as z:
                for member in z.namelist():
                    if member.lower().endswith(ALLOWED_EXTENSIONS):
                        with z.open(member) as cert_file:
                            cert_info = get_certificate_info(cert_file.read())
                            if cert_info: all_certs_data.append(cert_info)
        except zipfile.BadZipFile:
            logger.error(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π ZIP-—Ñ–∞–π–ª: {file_name}", exc_info=True); return []
    elif file_name.lower().endswith(ALLOWED_EXTENSIONS):
        cert_info = get_certificate_info(file_bytes)
        if cert_info: all_certs_data.append(cert_info)
    return all_certs_data

def create_akc_docx(form_data: dict) -> io.BytesIO:
    doc = docx.Document()
    section = doc.sections[0]
    section.orientation = WD_ORIENT.LANDSCAPE
    new_width, new_height = section.page_height, section.page_width
    section.page_width = new_width
    section.page_height = new_height
    
    section.top_margin = Cm(2)
    section.bottom_margin = Cm(2)
    section.left_margin = Cm(3)
    section.right_margin = Cm(1.5)

    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.RIGHT
    run = p.add_run("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 5 –∫ –†–µ–≥–ª–∞–º–µ–Ω—Ç—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è\n–º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ê–º—É—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–≥–æ\n—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞")
    font = run.font
    font.name = 'Times New Roman'
    font.size = Pt(12)

    doc.add_paragraph() 

    p = doc.add_paragraph()
    run = p.add_run("–û—Ç –∫–æ–≥–æ: ")
    run.bold = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)
    run = p.add_run(f"{form_data.get('sender_fio', '')}\n")
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)
    
    run = p.add_run("(–§.–ò.–û. –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è)\n")
    run.italic = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(10)
    
    run = p.add_run(f"{form_data.get('org_name', '')}\n")
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)

    run = p.add_run("(–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è)\n")
    run.italic = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(10)

    run = p.add_run(f"{form_data.get('inn_kpp', '')}\n")
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)

    run = p.add_run("(–ò–ù–ù/–ö–ü–ü)\n")
    run.italic = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(10)

    run = p.add_run(f"{form_data.get('municipality', '')}\n")
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)

    run = p.add_run("(–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è)\n")
    run.italic = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(10)

    run = p.add_run(f"{datetime.now().strftime('%d.%m.%Y')}\n")
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)

    run = p.add_run("(–¥–∞—Ç–∞)")
    run.italic = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(10)

    doc.add_paragraph()

    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = p.add_run("–ó–ê–Ø–í–ö–ê\n–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¶–ò–¢–ü")
    run.bold = True
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)
    
    doc.add_paragraph()

    table = doc.add_table(rows=2, cols=7)
    table.style = 'Table Grid'
    
    headers = [
        "–°—É–±—ä–µ–∫—Ç –≠–ü", "–†–æ–ª—å —Å—É–±—ä–µ–∫—Ç–∞ –≤ –¶–ò–¢–ü (–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –ë—É—Ö–≥–∞–ª—Ç–µ—Ä, –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ì–ò–° –ì–ú–ü)", 
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¶–ò–¢–ü (–ê–¶–ö-–§–∏–Ω–∞–Ω—Å—ã, –ê–¶–ö-–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)", 
        "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞", "–ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞", 
        "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –¶–ò–¢–ü, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ", 
        "–î–µ–π—Å—Ç–≤–∏–µ(–¥–æ–±–∞–≤–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å, –∑–∞–º–µ–Ω–∏—Ç—å, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)"
    ]
    
    for i, cell in enumerate(table.rows[0].cells):
        cell.text = headers[i]
        cell.paragraphs[0].runs[0].font.bold = True
        cell.paragraphs[0].runs[0].font.size = Pt(10)

    table.cell(1, 0).text = form_data.get('cert_owner', '')
    table.cell(1, 1).text = form_data.get('role', '')
    table.cell(1, 2).text = form_data.get('citp_name', '')
    table.cell(1, 3).text = form_data.get('cert_serial', '')
    table.cell(1, 4).text = form_data.get('cert_filename', '')
    table.cell(1, 5).text = form_data.get('logins', '')
    table.cell(1, 6).text = form_data.get('action', '')

    for cell in table.rows[1].cells:
        cell.paragraphs[0].runs[0].font.size = Pt(10)

    doc.add_paragraph()

    footer_table = doc.add_table(rows=4, cols=3)
    
    footer_table.cell(0, 0).text = "‚Ññ –ó–∞–ø–∏—Å–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –∂—É—Ä–Ω–∞–ª–µ:"
    footer_table.cell(0, 1).text = "–°—Ç–∞—Ç—É—Å:  –≤—ã–ø–æ–ª–Ω–µ–Ω–æ/–æ—Ç–∫–∞–∑–∞–Ω–æ"
    
    footer_table.cell(1, 0).text = "–ó–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    footer_table.cell(1, 1).text = "–ü–æ–¥–ø–∏—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è"
    footer_table.cell(1, 2).text = "–î–∞—Ç–∞"
    
    footer_table.cell(2, 0).text = "–î–∞—Ç–∞:"
    footer_table.cell(2, 1).text = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:"
    
    footer_table.cell(3, 0).text = "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –°–ö–ü –≠–ü"
    footer_table.cell(3, 1).text = "–ú.–ü."
    footer_table.cell(3, 2).text = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ e-mail"

    for row in footer_table.rows:
        for cell in row.cells:
            if cell.text:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = 'Times New Roman'
                        run.font.size = Pt(12)

    doc_buffer = io.BytesIO()
    doc.save(doc_buffer)
    doc_buffer.seek(0)
    return doc_buffer


# --- 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î, –ö–ù–û–ü–û–ö –ò –î–ò–ê–õ–û–ì–û–í ---
async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    await update.message.reply_text(f"–í–∞—à User ID: `{user_id}`", parse_mode='Markdown')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    keyboard = [
        ["üìú –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"],
        ["üé¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å YouTube", "üìÑ –ó–∞—è–≤–∫–∞ –ê–¶–ö"], 
        ["‚ùì –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    start_message = (f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
    await update.message.reply_html(start_message, reply_markup=reply_markup)
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏:\n\n"
        "üìú **–ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤**\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã `.cer`, `.crt` –∏–ª–∏ `.zip`-–∞—Ä—Ö–∏–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-–æ—Ç—á–µ—Ç–∞.\n\n"
        "üìÑ **–ó–∞—è–≤–∫–∞ –ê–¶–ö**\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX.\n\n"
        "üé¨ **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å YouTube**\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.\n\n"
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤**\n"
        "–ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä–æ–≥ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö."
    )
    await update.message.reply_text(help_text)

async def request_certificate_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª(—ã) —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ ({', '.join(ALLOWED_EXTENSIONS)}) –∏–ª–∏ ZIP-–∞—Ä—Ö–∏–≤.")

def download_video_sync(url: str, ydl_opts: dict) -> str:
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        return ydl.prepare_filename(info)

async def handle_youtube_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    url = update.message.text
    msg = await update.message.reply_text("–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
    
    try:
        ydl_opts_info = {'quiet': True, 'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'}
        with yt_dlp.YoutubeDL(ydl_opts_info) as ydl:
            info_dict = ydl.extract_info(url, download=False)
        
        filesize = info_dict.get('filesize') or info_dict.get('filesize_approx')
        title = info_dict.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        if not filesize:
            await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ."); return ConversationHandler.END

        if filesize > MAX_VIDEO_SIZE_BYTES:
            size_in_mb = filesize / 1024 / 1024
            await msg.edit_text(f"‚ùå –í–∏–¥–µ–æ '{title}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({size_in_mb:.1f} –ú–ë)."); return ConversationHandler.END

        context.user_data['youtube_url'] = url; context.user_data['youtube_title'] = title
        
        size_in_mb = filesize / 1024 / 1024
        keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, —Å–∫–∞—á–∞—Ç—å", callback_data='yt_confirm'), InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='yt_cancel')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await msg.edit_message_text(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n**–†–∞–∑–º–µ—Ä:** {size_in_mb:.1f} –ú–ë\n\n–ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ?", reply_markup=reply_markup, parse_mode='Markdown')
        return CONFIRMING_DOWNLOAD

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ YouTube –≤–∏–¥–µ–æ: {e}", exc_info=True)
        await msg.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ: {url}"); return ConversationHandler.END

async def start_download_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    url = context.user_data.get('youtube_url'); title = context.user_data.get('youtube_title', '–≤–∏–¥–µ–æ')
    user_id = update.effective_user.id

    if not url:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."); return ConversationHandler.END

    await query.edit_message_text(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É '{title}'...")
    
    ydl_opts = {'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best', 'outtmpl': f'{uuid.uuid4()}.%(ext)s', 'quiet': True}
    
    try:
        video_filename = await asyncio.to_thread(download_video_sync, url, ydl_opts)
        await query.edit_message_text("–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        with open(video_filename, 'rb') as video_file:
            await context.bot.send_video(chat_id=user_id, video=video_file, supports_streaming=True, read_timeout=120, write_timeout=120)
        os.remove(video_filename); await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ: {url}")
    
    return ConversationHandler.END

async def cancel_download(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    await query.edit_message_text("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def youtube_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.")
    return AWAITING_YOUTUBE_LINK

async def invalid_youtube_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    return AWAITING_YOUTUBE_LINK

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    document = update.message.document
    if document.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë."); return
    user_id = update.effective_user.id; user_threshold = await get_user_threshold(user_id, context)
    file_name = document.file_name; logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file_name} –æ—Ç {user_id}")
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    try:
        file_object = await context.bot.get_file(document.file_id); file_buffer = io.BytesIO()
        await file_object.download_to_memory(file_buffer); file_buffer.seek(0)
        all_certs_data = _process_file_content(file_buffer.read(), file_name)
        if not all_certs_data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã."); return
        excel_buffer = create_excel_report(all_certs_data, user_threshold); summary_message = generate_summary_message(all_certs_data, user_threshold)
        await update.message.reply_text(summary_message); await update.message.reply_document(document=excel_buffer, filename="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã_–æ—Ç—á–µ—Ç.xlsx")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True); await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

async def handle_wrong_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ù—É–∂–Ω—ã: {', '.join(ALLOWED_EXTENSIONS)}, .zip")

async def settings_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id; current_threshold = await get_user_threshold(user_id, context)
    keyboard = [[InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥", callback_data='change_threshold')], [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: **{current_threshold}** –¥–Ω–µ–π.", reply_markup=reply_markup, parse_mode='Markdown')
    return CHOOSING_ACTION

async def prompt_for_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    await query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60).")
    return TYPING_DAYS

async def set_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    try:
        new_threshold = int(update.message.text)
        if new_threshold <= 0:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."); return TYPING_DAYS
        context.user_data['threshold'] = new_threshold; save_user_threshold(user_id, new_threshold)
        await update.message.reply_html(f"‚úÖ –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{new_threshold}</b> –¥–Ω–µ–π.")
    except (ValueError):
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 60"); return TYPING_DAYS
    return ConversationHandler.END

async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    await query.edit_message_text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END

async def akc_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    context.user_data['akc_form'] = {}
    
    defaults = load_akc_defaults(user_id)
    if defaults:
        context.user_data['akc_defaults'] = defaults
        text = (
            "–ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–ø–∫–∏ –∑–∞—è–≤–∫–∏:\n\n"
            f"**–û—Ç –∫–æ–≥–æ:** {defaults['sender_fio']}\n"
            f"**–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ:** {defaults['org_name']}\n"
            f"**–ò–ù–ù/–ö–ü–ü:** {defaults['inn_kpp']}\n"
            f"**–ú–û:** {defaults['municipality']}\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?"
        )
        keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data='akc_use_defaults')], [InlineKeyboardButton("‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='akc_refill')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        return AKC_CONFIRM_DEFAULTS
    else:
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ê–¶–ö.\n\n–í–≤–µ–¥–∏—Ç–µ **–§–ò–û –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è**:", parse_mode='Markdown')
        return AKC_SENDER_FIO

async def akc_use_defaults(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    context.user_data['akc_form'] = context.user_data.get('akc_defaults', {})
    await query.edit_message_text("–î–∞–Ω–Ω—ã–µ —à–∞–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.\n\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞** (.cer, .crt):", parse_mode='Markdown')
    return AKC_AWAIT_CERTIFICATE

async def akc_refill_defaults(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    await query.edit_message_text("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.\n\n–í–≤–µ–¥–∏—Ç–µ **–§–ò–û –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏—è**:", parse_mode='Markdown')
    return AKC_SENDER_FIO

async def akc_get_sender_fio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['akc_form']['sender_fio'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ **–ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è**:", parse_mode='Markdown')
    return AKC_ORG_NAME

async def akc_get_org_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['akc_form']['org_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ **–ò–ù–ù/–ö–ü–ü** —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:", parse_mode='Markdown')
    return AKC_INN_KPP

async def akc_get_inn_kpp(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['akc_form']['inn_kpp'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ **–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è**:", parse_mode='Markdown')
    return AKC_MUNICIPALITY

async def akc_get_municipality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    context.user_data['akc_form']['municipality'] = update.message.text
    save_akc_defaults(user_id, context.user_data['akc_form'])
    await update.message.reply_text("–®–∞–ø–∫–∞ –∑–∞—è–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞** (.cer, .crt):", parse_mode='Markdown')
    return AKC_AWAIT_CERTIFICATE

async def akc_get_certificate_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    document = update.message.document
    file_id = document.file_id
    
    try:
        file_object = await context.bot.get_file(file_id)
        file_buffer = io.BytesIO()
        await file_object.download_to_memory(file_buffer)
        
        cert_bytes = file_buffer.getvalue()
        cert_data = get_certificate_info(cert_bytes)
        
        if not cert_data:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return AKC_AWAIT_CERTIFICATE

        context.user_data['akc_form']['cert_owner'] = cert_data['–§–ò–û']
        context.user_data['akc_form']['cert_serial'] = cert_data['–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä']
        context.user_data['akc_form']['cert_filename'] = document.file_name
        context.user_data['akc_form']['cert_bytes'] = cert_bytes
        
        await update.message.reply_text(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è **{cert_data['–§–ò–û']}** —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", parse_mode='Markdown')
        
        keyboard = [[InlineKeyboardButton("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data='role_–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å')], [InlineKeyboardButton("–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", callback_data='role_–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')], [InlineKeyboardButton("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ì–ò–° –ì–ú–ü", callback_data='role_–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ì–ò–° –ì–ú–ü')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ **—Ä–æ–ª—å —Å—É–±—ä–µ–∫—Ç–∞**:", reply_markup=reply_markup, parse_mode='Markdown')
        return AKC_ROLE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞."); return AKC_AWAIT_CERTIFICATE

async def akc_invalid_cert_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.")
    return AKC_AWAIT_CERTIFICATE

async def akc_get_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    role = query.data.split('_')[1]; context.user_data['akc_form']['role'] = role
    keyboard = [[InlineKeyboardButton("–ê–¶–ö-–§–∏–Ω–∞–Ω—Å—ã", callback_data='citp_–ê–¶–ö-–§–∏–Ω–∞–Ω—Å—ã')], [InlineKeyboardButton("–ê–¶–ö-–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='citp_–ê–¶–ö-–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {role}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ **–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¶–ò–¢–ü**:", reply_markup=reply_markup, parse_mode='Markdown')
    return AKC_CITP_NAME

async def akc_get_citp_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    citp_name = query.data.split('_')[1]; context.user_data['akc_form']['citp_name'] = citp_name
    await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {citp_name}.\n\n–í–≤–µ–¥–∏—Ç–µ **–∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–≥–∏–Ω—ã)**, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", parse_mode='Markdown')
    return AKC_LOGINS

async def akc_get_logins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['akc_form']['logins'] = update.message.text
    keyboard = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data='action_–¥–æ–±–∞–≤–∏—Ç—å'), InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='action_—É–¥–∞–ª–∏—Ç—å')], [InlineKeyboardButton("–ó–∞–º–µ–Ω–∏—Ç—å", callback_data='action_–∑–∞–º–µ–Ω–∏—Ç—å'), InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='action_–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ **–¥–µ–π—Å—Ç–≤–∏–µ** —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º:", reply_markup=reply_markup, parse_mode='Markdown')
    return AKC_ACTION

async def akc_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    action = query.data.split('_')[1]; context.user_data['akc_form']['action'] = action
    await query.edit_message_text(text="–§–æ—Ä–º–∏—Ä—É—é ZIP-–∞—Ä—Ö–∏–≤...")
    
    try:
        form_data = context.user_data['akc_form']
        docx_buffer = create_akc_docx(form_data)
        docx_filename = f"–ó–∞—è–≤–∫–∞_–ê–¶–ö_{form_data.get('cert_owner', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}.docx"
        
        cert_bytes = form_data.get('cert_bytes')
        cert_filename = form_data.get('cert_filename', 'certificate.cer')

        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, 'w') as zip_file:
            zip_file.writestr(docx_filename, docx_buffer.getvalue())
            if cert_bytes:
                zip_file.writestr(cert_filename, cert_bytes)
        zip_buffer.seek(0)
        
        zip_filename = f"–ó–∞—è–≤–∫–∞_–∏_—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç_{form_data.get('cert_owner', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}.zip"
        
        await context.bot.send_document(chat_id=update.effective_chat.id, document=zip_buffer, filename=zip_filename, caption="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ ZIP-–∞—Ä—Ö–∏–≤–µ.")
        await query.message.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ZIP-–∞—Ä—Ö–∏–≤–∞: {e}", exc_info=True)
        await query.edit_message_text(text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞.")

    context.user_data.pop('akc_form', None)
    return ConversationHandler.END


# --- 6. –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---
async def main() -> None:
    if not TELEGRAM_BOT_TOKEN or not DATABASE_URL:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."); return
    init_database()
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    cancel_handler = MessageHandler(filters.Regex('^(üìú –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤|üé¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å YouTube|üìÑ –ó–∞—è–≤–∫–∞ –ê–¶–ö|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤|‚ùì –ü–æ–º–æ—â—å)$') & user_filter, cancel)
    
    settings_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤$') & user_filter, settings_entry)],
        states={
            CHOOSING_ACTION: [CallbackQueryHandler(prompt_for_days, pattern='^change_threshold$'), CallbackQueryHandler(end_conversation, pattern='^back_to_main$')],
            TYPING_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_days)],
        },
        fallbacks=[CommandHandler('start', start), cancel_handler],
    )
    youtube_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üé¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å YouTube$') & user_filter, youtube_entry)],
        states={
            AWAITING_YOUTUBE_LINK: [MessageHandler(filters.Regex(YOUTUBE_URL_PATTERN), handle_youtube_link)],
            CONFIRMING_DOWNLOAD: [CallbackQueryHandler(start_download_confirmed, pattern='^yt_confirm$'), CallbackQueryHandler(cancel_download, pattern='^yt_cancel$')]
        },
        fallbacks=[CommandHandler('start', start), cancel_handler]
    )
    
    akc_cert_filter = (
        filters.Document.FileExtension("cer") |
        filters.Document.FileExtension("crt") |
        filters.Document.FileExtension("pem") |
        filters.Document.FileExtension("der")
    )
    
    akc_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üìÑ –ó–∞—è–≤–∫–∞ –ê–¶–ö$') & user_filter, akc_start)],
        states={
            AKC_CONFIRM_DEFAULTS: [CallbackQueryHandler(akc_use_defaults, pattern='^akc_use_defaults$'), CallbackQueryHandler(akc_refill_defaults, pattern='^akc_refill$')],
            AKC_SENDER_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, akc_get_sender_fio)],
            AKC_ORG_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, akc_get_org_name)],
            AKC_INN_KPP: [MessageHandler(filters.TEXT & ~filters.COMMAND, akc_get_inn_kpp)],
            AKC_MUNICIPALITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, akc_get_municipality)],
            AKC_AWAIT_CERTIFICATE: [MessageHandler(akc_cert_filter, akc_get_certificate_file), MessageHandler(filters.Document.FileExtension("zip"), akc_invalid_cert_file)],
            AKC_ROLE: [CallbackQueryHandler(akc_get_role, pattern='^role_')],
            AKC_CITP_NAME: [CallbackQueryHandler(akc_get_citp_name, pattern='^citp_')],
            AKC_LOGINS: [MessageHandler(filters.TEXT & ~filters.COMMAND, akc_get_logins)],
            AKC_ACTION: [CallbackQueryHandler(akc_finish, pattern='^action_')],
        },
        fallbacks=[CommandHandler('start', start), cancel_handler],
    )
    
    application.add_handler(settings_conv_handler)
    application.add_handler(youtube_conv_handler)
    application.add_handler(akc_conv_handler)
    
    application.add_handler(CommandHandler("my_id", get_my_id))
    application.add_handler(CommandHandler("start", start, filters=user_filter))
    
    simple_buttons_text = "^(üìú –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤|‚ùì –ü–æ–º–æ—â—å)$"
    application.add_handler(MessageHandler(filters.Regex(simple_buttons_text) & user_filter, handle_simple_buttons))
    
    allowed_extensions_filter = (
        filters.Document.FileExtension("zip") | filters.Document.FileExtension("cer") |
        filters.Document.FileExtension("crt") | filters.Document.FileExtension("pem") |
        filters.Document.FileExtension("der")
    )
    application.add_handler(MessageHandler(allowed_extensions_filter & ~filters.COMMAND & user_filter, handle_document))
    application.add_handler(MessageHandler(filters.Document.ALL & ~filters.COMMAND & user_filter, handle_wrong_document))

    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        async with application:
            await application.start()
            await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
            await asyncio.Future()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)


# --- 7. –¢–û–ß–ö–ê –í–•–û–î–ê ---
if __name__ == "__main__":
    asyncio.run(main())

# =================================================================================
#¬† ¬† –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–û–¢–ê (V32 - –û–¢–ö–ê–¢ –§–£–ù–ö–¶–ò–ò OCSP, –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø)
# =================================================================================

# --- 1. –ò–ú–ü–û–†–¢–´ ---
import os
import logging
from datetime import datetime
import zipfile
import io
from typing import List, Dict, Any, Optional, Tuple, Set
import asyncio
import psycopg2

import uvicorn
from fastapi import FastAPI
from telegram import Update, ReplyKeyboardMarkup, Message, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from openpyxl import Workbook
from openpyxl.styles import PatternFill
from openpyxl.utils import get_column_letter
from dotenv import load_dotenv
load_dotenv()


# --- 2. –ù–ê–°–¢–†–û–ô–ö–ê –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.environ.get("DATABASE_URL")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

ALLOWED_USER_IDS: Set[int] = {96238783}
user_filter = filters.User(user_id=ALLOWED_USER_IDS)

MAX_FILE_SIZE = 20 * 1024 * 1024
EXPIRATION_THRESHOLD_DAYS = 30
RED_FILL = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
ORANGE_FILL = PatternFill(start_color="FFDDAA", end_color="FFDDAA", fill_type="solid")
GREEN_FILL = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")
EXCEL_HEADERS: Tuple[str, ...] = ("–§–ò–û", "–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ", "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π")
ALLOWED_EXTENSIONS: Tuple[str, ...] = ('.cer', '.crt', '.pem', '.der')

CHOOSING_ACTION, TYPING_DAYS = range(2)


# --- 3. –í–ï–ë-–°–ï–†–í–ï–† FASTAPI ---
app = FastAPI(docs_url=None, redoc_url=None)

@app.api_route("/", methods=["GET", "HEAD"])
async def root():
    return {"status": "bot is running"}


# --- 4. –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• POSTGRESQL ---
def get_db_connection():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except psycopg2.OperationalError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        return None

def init_database():
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cursor:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_settings (
                    user_id BIGINT PRIMARY KEY,
                    threshold INTEGER NOT NULL
                )
            ''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}", exc_info=True)
    finally:
        if conn: conn.close()

def save_user_threshold(user_id: int, threshold: int):
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO user_settings (user_id, threshold) VALUES (%s, %s) "
                "ON CONFLICT (user_id) DO UPDATE SET threshold = EXCLUDED.threshold;",
                (user_id, threshold)
            )
        conn.commit()
        logger.info(f"–ü–æ—Ä–æ–≥ {threshold} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î.")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
    finally:
        if conn: conn.close()

def load_user_threshold(user_id: int) -> Optional[int]:
    conn = get_db_connection()
    if not conn: return None
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT threshold FROM user_settings WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
        if result:
            logger.info(f"–ü–æ—Ä–æ–≥ {result[0]} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î.")
            return result[0]
        return None
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        return None
    finally:
        if conn: conn.close()

async def get_user_threshold(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> int:
    if 'threshold' in context.user_data:
        return context.user_data['threshold']
    
    threshold_from_db = load_user_threshold(user_id)
    if threshold_from_db is not None:
        context.user_data['threshold'] = threshold_from_db
        return threshold_from_db

    return EXPIRATION_THRESHOLD_DAYS


# --- 5. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
def create_excel_report(cert_data_list: List[Dict[str, Any]], user_threshold: int) -> io.BytesIO:
    wb = Workbook(); ws = wb.active; ws.title = "–û—Ç—á–µ—Ç –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º"
    ws.append(list(EXCEL_HEADERS))
    sorted_cert_data = sorted(cert_data_list, key=lambda x: x["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ"])
    for cert_data in sorted_cert_data:
        row = [cert_data["–§–ò–û"], cert_data["–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ"], cert_data["–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"], cert_data["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å"].strftime("%d.%m.%Y"), cert_data["–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ"].strftime("%d.%m.%Y"), cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]]
        ws.append(row); last_row = ws.max_row; days_left = cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]
        fill_color = None
        if days_left < 0: fill_color = RED_FILL
        elif 0 <= days_left <= user_threshold: fill_color = ORANGE_FILL
        else: fill_color = GREEN_FILL
        if fill_color:
            for cell in ws[last_row]: cell.fill = fill_color
    for column in ws.columns:
        max_length = 0; column_letter = get_column_letter(column[0].column)
        for cell in column:
            try:
                if len(str(cell.value)) > max_length: max_length = len(str(cell.value))
            except: pass
        adjusted_width = (max_length + 2); ws.column_dimensions[column_letter].width = adjusted_width
    excel_buffer = io.BytesIO(); wb.save(excel_buffer); excel_buffer.seek(0)
    return excel_buffer

def generate_summary_message(cert_data_list: List[Dict[str, Any]], user_threshold: int) -> str:
    expiring_soon_certs = []
    for cert_data in cert_data_list:
        days_left = cert_data["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"]
        if 0 <= days_left <= user_threshold:
            expiring_soon_certs.append(f"üë§ {cert_data['–§–ò–û']} ‚Äî {cert_data['–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ'].strftime('%d.%m.%Y')} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)")
    if expiring_soon_certs:
        message_parts = [f"‚ö†Ô∏è –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç ({user_threshold} –¥–Ω–µ–π):", *expiring_soon_certs]
        return "\n".join(message_parts)
    else: return "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

def get_certificate_info(cert_bytes: bytes) -> Optional[Dict[str, Any]]:
    try:
        try: cert = x509.load_pem_x509_certificate(cert_bytes, default_backend())
        except ValueError: cert = x509.load_der_x509_certificate(cert_bytes, default_backend())
        try: subject_common_name = cert.subject.get_attributes_for_oid(x509.OID_COMMON_NAME)[0].value
        except IndexError: subject_common_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        try: organization_name = cert.subject.get_attributes_for_oid(x509.OID_ORGANIZATION_NAME)[0].value
        except IndexError: organization_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        serial_number = f"{cert.serial_number:X}"; valid_from = cert.not_valid_before.date(); valid_until = cert.not_valid_after.date()
        days_left = (valid_until - datetime.now().date()).days
        return {"–§–ò–û": subject_common_name, "–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ": organization_name, "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä": serial_number, "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å": valid_from, "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ": valid_until, "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π": days_left}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}"); return None

def _process_file_content(file_bytes: bytes, file_name: str) -> List[Dict[str, Any]]:
    all_certs_data = []
    if file_name.lower().endswith(".zip"):
        try:
            with zipfile.ZipFile(io.BytesIO(file_bytes), 'r') as z:
                for member in z.namelist():
                    if member.lower().endswith(ALLOWED_EXTENSIONS):
                        with z.open(member) as cert_file:
                            cert_info = get_certificate_info(cert_file.read())
                            if cert_info: all_certs_data.append(cert_info)
        except zipfile.BadZipFile:
            logger.error(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π ZIP-—Ñ–∞–π–ª: {file_name}", exc_info=True); return []
    elif file_name.lower().endswith(ALLOWED_EXTENSIONS):
        cert_info = get_certificate_info(file_bytes)
        if cert_info: all_certs_data.append(cert_info)
    return all_certs_data

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    await update.message.reply_text(f"–í–∞—à User ID: `{user_id}`", parse_mode='Markdown')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    keyboard = [["üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "üìÑ –ó–∞—è–≤–∫–∞ –ê–ö–¶"], ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    start_message = (f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
    await update.message.reply_html(start_message, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ 'üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª...")

async def request_certificate_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª(—ã) —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")

async def acc_finance_placeholder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_html("üìà **–§—É–Ω–∫—Ü–∏—è '–ó–∞—è–≤–∫–∞ –ê–ö–¶-–§–∏–Ω–∞–Ω—Å—ã' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.**...")

async def settings_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    current_threshold = await get_user_threshold(user_id, context)
    keyboard = [[InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥", callback_data='change_threshold')], [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π**\n\n–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: **{current_threshold}** –¥–Ω–µ–π.\n\n–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.",
        reply_markup=reply_markup, parse_mode='Markdown'
    )
    return CHOOSING_ACTION

async def prompt_for_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60).")
    return TYPING_DAYS

async def set_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    try:
        new_threshold = int(update.message.text)
        if new_threshold <= 0:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."); return TYPING_DAYS
        context.user_data['threshold'] = new_threshold; save_user_threshold(user_id, new_threshold)
        await update.message.reply_html(f"‚úÖ –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{new_threshold}</b> –¥–Ω–µ–π.")
    except (ValueError):
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 60"); return TYPING_DAYS
    return ConversationHandler.END

async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    await query.edit_message_text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã.")
    return ConversationHandler.END

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    document = update.message.document
    if document.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë."); return
    user_id = update.effective_user.id; user_threshold = await get_user_threshold(user_id, context)
    file_name = document.file_name; logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file_name} –æ—Ç {user_id}")
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    try:
        file_object = await context.bot.get_file(document.file_id); file_buffer = io.BytesIO()
        await file_object.download_to_memory(file_buffer); file_buffer.seek(0)
        all_certs_data = _process_file_content(file_buffer.read(), file_name)
        if not all_certs_data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã."); return
        excel_buffer = create_excel_report(all_certs_data, user_threshold); summary_message = generate_summary_message(all_certs_data, user_threshold)
        await update.message.reply_text(summary_message); await update.message.reply_document(document=excel_buffer, filename="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã_–æ—Ç—á–µ—Ç.xlsx")
        logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True); await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

async def handle_wrong_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    document = update.message.document
    if document.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë."); return
    await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ù—É–∂–Ω—ã: {', '.join(ALLOWED_EXTENSIONS)}, .zip")

async def handle_simple_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    button_text = update.message.text
    if button_text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif button_text == "üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç":
        await request_certificate_files(update, context)
    elif button_text == "üìÑ –ó–∞—è–≤–∫–∞ –ê–ö–¶":
        await acc_finance_placeholder(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END


# --- 6. –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---
async def main() -> None:
    init_database()
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
    if not DATABASE_URL:
        logger.error("DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω."); return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    settings_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏$') & user_filter, settings_entry)],
        states={
            CHOOSING_ACTION: [
                CallbackQueryHandler(prompt_for_days, pattern='^change_threshold$'),
                CallbackQueryHandler(end_conversation, pattern='^back_to_main$'),
            ],
            TYPING_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_days)],
        },
        fallbacks=[
            CommandHandler('start', start),
            MessageHandler(filters.Regex('^(üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç|üìÑ –ó–∞—è–≤–∫–∞ –ê–ö–¶|‚ùì –ü–æ–º–æ—â—å)$'), cancel)
        ],
    )
    
    application.add_handler(settings_conv_handler)
    application.add_handler(CommandHandler("my_id", get_my_id))
    application.add_handler(CommandHandler("start", start, filters=user_filter))
    application.add_handler(CommandHandler("help", help_command, filters=user_filter))
    
    simple_buttons_text = "^(üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç|üìÑ –ó–∞—è–≤–∫–∞ –ê–ö–¶|‚ùì –ü–æ–º–æ—â—å)$"
    application.add_handler(MessageHandler(filters.Regex(simple_buttons_text) & user_filter, handle_simple_buttons))

    allowed_extensions_filter = (
        filters.Document.FileExtension("zip") | filters.Document.FileExtension("cer") |
        filters.Document.FileExtension("crt") | filters.Document.FileExtension("pem") |
        filters.Document.FileExtension("der")
    )
    application.add_handler(MessageHandler(allowed_extensions_filter & ~filters.COMMAND & user_filter, handle_document))
    application.add_handler(MessageHandler(filters.Document.ALL & ~filters.COMMAND & user_filter, handle_wrong_document))

    port = int(os.environ.get('PORT', 8000))
    config = uvicorn.Config(app, host="0.0.0.0", port=port, log_level="info")
    server = uvicorn.Server(config)
    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ (polling) –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (uvicorn)...")
        async with application:
            await application.start()
            await application.updater.start_polling()
            await server.serve()
            await application.updater.stop()
            await application.stop()
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)


# --- 7. –¢–û–ß–ö–ê –í–•–û–î–ê –î–õ–Ø –ó–ê–ü–£–°–ö–ê –°–ö–†–ò–ü–¢–ê ---
if __name__ == "__main__":
    asyncio.run(main())